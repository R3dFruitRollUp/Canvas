#! /usr/bin/env python

#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2002-2004
#http://www.immunityinc.com/CANVAS/ for more information

import sys
#covers both angles
if "." not in sys.path: sys.path.append(".")


import os,getopt
import socket
from exploitutils import *


from canvasexploit import canvasexploit
import canvasengine
import time



NAME="startup"
DESCRIPTION="Startup Functions (Gets called on successful exploitation)"
DOCUMENTATION={}
VERSION="1.0"

affectsList=[]

class theexploit(canvasexploit):
    def __init__(self):
        canvasexploit.__init__(self)
        self.result=""
        self.supportedNodeTypes=["LocalNode","UnixShellNode","win32Node","linuxNode"]
        return

    def run(self):
        self.setInfo("%s (in progress)"%(NAME))

        node=self.argsDict["passednodes"][0]
        type=node.nodetype

        self.log("Automatic startup in progress")

        #########  check if we're inside a VM ##########
        if type in ["win32Node", "linuxNode", "bsdNode"]:
            app = self.engine.getModuleExploit("checkvm")
            app.link(self)
            app.argsDict = self.argsDict
            app.run()
        ################################################

        #MOSDEF test for Win32 Nodes and cparse.py/tokenizer
        #if type in ["win32Node"]:
        #    fakeobj=""" "'@!$#%@%$#&* """
        #    fakeAddr=node.shell.malloc(len(fakeobj))
        #    node.shell.memcpy(fakeAddr, fakeobj)
            
        
        #if type in ["win32Node","linuxNode"]:
            
            ## You can run the commands though the methods of the node itself
            
            ## LISTING DIR
            #self.result=node.dir(".")
            #self.engine.log("listing: %s"%self.result)

            ## or we can request a Command/Exploit and use it
            
            ## SCREENGRAB
            #app=self.engine.getModuleExploit("screengrab")
            #app.link(self)
            #app.argsDict=self.argsDict
            #app.run()
            #if app.filename and app.vert:
            #    os.system("/usr/bin/display  -depth 8 -size %sx%s rgb:%s &" % (app.hor, app.vert, app.filename))
                   
        self.engine.log("Automatic startup done")
        return 1

if __name__ == '__main__':
    print "cannot be run from commandline"
