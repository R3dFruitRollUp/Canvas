#! /usr/bin/env python



#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2002-2004
#http://www.immunityinc.com/CANVAS/ for more information

import sys
#covers both angles
sys.path.append(".")
sys.path.append("../../")
sys.path.append('../../encoder')
sys.path.append('./encoder')
sys.path.append("../../shellcode")
sys.path.append("./shellcode")
sys.path.append("../../gui")
sys.path.append("./gui")


import os,getopt
import socket
from exploitutils import *
import addencoder
import win32shell
from canvasexploit import canvasexploit
import canvasengine
from canvasengine import socket_save_list
import time
import shellcodeGenerator


NAME="rmdir"
DESCRIPTION="Remove a Directory. Uses first selected node."
DOCUMENTATION={}
#QO44056 fixes this?
VERSION="1.0"
GTK2_DIALOG="dialog.glade2"

affectsList=["Commands"]

runAnExploit_gtk2=canvasengine.runAnExploit_gtk2
runExploit=canvasengine.runExploit


class theexploit(canvasexploit):
    def __init__(self):
        canvasexploit.__init__(self)
        self.result=""
        self.supportedNodeArgs=[["LocalNode","UnixShellNode","win32Node","linuxNode"]]
        self.directory="/doesnotexist"
        return

    def run(self):
        self.setInfo("%s (in progress)"%(NAME))
        filename=self.argsDict.get("directory",self.directory)
        
        for node in self.argsDict["passednodes"]:
            type=node.nodetype

            if type not in self.supportedNodeArgs[0]:
                #skip nodes we don't support...
                self.log("%s node type not supported"%type)
                continue
                
            if type=="UnixShellNode":
                self.result=node.runcommand("rmdir %" % filename)

            elif type in ["win32Node","linuxNode"]:
                self.result=node.rmdir(filename)
            else:
                self.result=os.rmdir(filename)
                
        #     self.log("current file: %s"% self.result)
        self.setInfo("%s - done (success: %s)"%(NAME,self.result))
        return 1


def usage():
    app=theexploit()
    print "Usage: "+sys.argv[0]+" [-T (for test)] -t target [-p port:"+str(app.port)+"] [-v version:1] -l localip -d localport "

    app.displayVersions()
    sys.exit()


if __name__ == '__main__':
    print "Running CANVAS %s Exploit v %s"%(DESCRIPTION,VERSION)
    app = theexploit()
    
    try:
        (opts,args)=getopt.getopt(sys.argv[1:],"v:t:s:l:d:p:T")
    except getopt.GetoptError:
        usage()

    target=""
    localhost=""
    localport=""
    test=0
    for o,a in opts:
        if o in ["-t"]:
            target=a
        if o in ["-v"]:
            app.setVersion(int(a))
        if o in ["-l"]:
            localhost=a
        if o in ["-d"]:
            localport=a
        if o in ["-T"]:
            test=1
        if o in ["-p"]:
            app.setPort(int(a))

    if (not test and (target == "" or localhost == "" or localport == "")):
        print "ERROR: Target: %s Localhost: %s Localport: %s"%(target,localhost,localport)
        usage()

    app.setHost(target)    
    if test:
        if target=="":
            usage()
        if app.test():
            print "Found!"
        sys.exit(1)
        

    app.run()
    #string = app.makesploit()
    #print string
    

