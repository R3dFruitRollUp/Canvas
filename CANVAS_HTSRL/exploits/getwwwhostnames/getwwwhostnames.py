#! /usr/bin/env python

"""
getwwwhostnames.py (Gather up hostnames for an IP address)

"""

#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2002-2006
#http://www.immunityinc.com/CANVAS/ for more information

import socket
import getopt
import sys

if "." not in sys.path:
    sys.path.append(".")



from canvasexploit import canvasexploit
from exploitutils import *
import canvasengine

DOCUMENTATION={}
DOCUMENTATION["Notes"]="""
This goes to some public databases that have lists of IP->hostname matchups
and then adds these to the www_hostname knowledge for that target.

This knowledge is then used by PHP include exploits who will iterate
through them looking for a vulnerable virtual host.
"""
#DOCUMENTATION["Date public"]="00/00/0000"
#DOCUMENTATION["CERT Advisory"]=""
#DOCUMENTATION["CVE Name"]=""
#DOCUMENTATION["References"]=""

DESCRIPTION="Gathers WWW hostnames for an IP address"

VERSION="1.0"

#affectsList=["Recon"]
PROPERTY = {}
PROPERTY['TYPE'] = "Recon"
PROPERTY['SITE'] = "Remote"

NAME="Get WWW Hostnames"

class theexploit(canvasexploit):
    def __init__(self):
        canvasexploit.__init__(self)
        
        self.name=NAME
        return
   
    def run(self):
        """
        runs the attempt to grab information
        """
        from libs.spkproxy import urlopen
        host = self.target.interface 
        result = urlopen("http://whois.webhosting.info/%s"%host, None, exploit=self)
        if result:
            data=result.read()
        else:
            data=""
        #self.log("Result: %s"%data)
        
        if data:
            done=False 
            num_found=0
            while not done:
                key="<td><a href=\"http://whois.webhosting.info/"
                firstindex=data.find(key)
                if firstindex==-1:
                    done=True
                    self.log("Found no key, done finding hosts")
                    break 
                secondindex=data[firstindex:].find(".\">")+firstindex
                if secondindex==-1:
                    done=True
                    self.log("Didn't find finishing bracket?")
                    break
                hostname=data[firstindex+len(key):secondindex]
                self.log("Found: %s"%hostname)
                num_found+=1
                self.target.add_to_knowledge("www_hostnames",[hostname])
                data=data[secondindex:]
                self.log("Got hostname: %s"%hostname)
            self.setInfo("%s - found %d hostnames!"%(self.name,num_found))
            return 1
        self.setInfo("%s - found no hostnames!"%self.name)
        return 0
    
if __name__ == '__main__':
    app = theexploit()
    ret=standard_callback_commandline(app)
