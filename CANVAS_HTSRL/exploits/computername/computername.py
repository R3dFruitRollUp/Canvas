#! /usr/bin/env python



#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2002-2004
#http://www.immunityinc.com/CANVAS/ for more information

import sys
#covers both angles
if "." not in sys.path: sys.path.append(".")


import os,getopt
import socket
from exploitutils import *


from canvasexploit import canvasexploit
import canvasengine
import time



NAME="computername"
DESCRIPTION="Get the computer name"
DOCUMENTATION={}
DOCUMENTATION["Warning"]="Use on a UnixNode may trigger snort!"

VERSION="1.0"

affectsList=["Commands"]


class theexploit(canvasexploit):
    def __init__(self):
        canvasexploit.__init__(self)
        self.result={}
        self.name=NAME
        return

    def run(self):
        self.setInfo("%s (in progress)"%(NAME))
        self.result={}
        for node in self.argsDict["passednodes"]:            
            type=node.nodetype
            nodename=node.getname()
            target=node.get_known_host("127.0.0.1")
            #first check to see if we have a cached computername - this never changes
            ret=target.get_knowledge("ComputerName")
            if ret:
                result=ret.known
                self.log("Result: %s"%result)
            else:
                result=""
                if type in ["UnixShellNode", "linuxNode"]:
                    #this is going to trigger snort!
                    result=node.runcommand("uname -n")
                #elif "linux" in node.capabilities:
                #    uid,euid,gid,egid=node.shell.ids() #0 for success in some cases...
                #    self.result="UID=%d EUID=%d GID=%d EGID=%d"%(uid,euid,gid,egid)
                #    self.log("Result: %s"%self.result)
                elif "win32api" in node.capabilities:
                    result=node.shell.getComputerName()
                    self.log("Computer Name: %s"%self.result)
                else:
                    self.log("Node of type %s not supported yet."%type)
                    pass
        
            self.log("Computer Name: %s"%result)
            self.result[nodename]=result

            target.add_knowledge("ComputerName", result, 100)

        self.setInfo("%s - done (success)"%(NAME))
        return 1

    

