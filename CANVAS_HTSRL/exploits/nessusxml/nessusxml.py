#! /usr/bin/env python

NOTES="""
Import remote 
"""

import sys
if '.' not in sys.path:
    sys.path.append('.')

from exploitutils import *
from canvasexploit import canvasexploit
import canvasengine

import re

# GUI info
NAME="nessusxml"
DESCRIPTION="Imports data from other tools into CANVAS"
DOCUMENTATION={}
DOCUMENTATION["Repeatability"] = "Infinite"
DOCUMENTATION['Usage'] = """
This module requires that you specify the format of the Nessus scan you wish you import

From GUI:
Filetype = [ nessus3-nsr, nessus3-nbe, nessus2-new ]
Filename = Name of the file you're trying to import
"""
DOCUMENTATION['Note'] = """
Data imported:
Hosts, TCP Ports, CVE -> CANVAS exploits

Formats currently supported:
nessus3 .nsr, .nbe
nessus2 .XML new

"""
VERSION="0.1"

PROPERTY = {}
PROPERTY['TYPE'] = "ImportExport"
PROPERTY['SITE'] = "Local"

class theexploit(canvasexploit):
    def __init__(self):
        canvasexploit.__init__(self)
        self.name=NAME
        self.filename=""
        self.filetype=""
        self.importCVE = True # Debugging
        return      

    def parseNessus2(self):
        """
        Parse the greppable file into CANVAS's host knowledge tree
        """
        import xml.sax
        from libs.libnessusxml import nessusxml

        parser = xml.sax.make_parser()
        handler = nessusxml()
        parser.setContentHandler(handler)
        found = False
        try:
            file = open(self.filename, 'r')
        except:
            self.log("Couldn't open file %s, exiting ..."%self.filename)
            return 0
        data = file.read().splitlines()
        file.close()

        #
        # Cull nessus2 xmls using the OLD style 
        for lines in data:
            if re.search("<host name=\"", lines): # NEW nessus2 xml's use this tag exclusively
                found = True
        if not found:        
            self.log("Couldn't find a host, %s is most likely not formatted correctly"%self.filename)
            return 0
        
        #
        # Cull malformatted xmls
        try:
            parser.parse(self.filename)
        except:
            self.log("%s is likely not a nessus2 XML file with the 'new' format, aborting..."%self.filename)
            return 0
        
        node=self.argsDict["passednodes"][0]
        self.log("Loading scan into node %s"%node.getname())
        for i in handler.mapping:
            hostip = handler.mapping[i]['address']
            hostname = handler.mapping[i]['hostname']
            if hostname != hostip and hostname:
                self.log("Adding host: IP %s, DNS %s"%(hostip,hostname))
                host=node.new_host(hostip)
                if hostname:
                    host.add_knowledge("DNSName",hostname,100)
            else:
                # Nessus will record the IP as the DNS name sometimes, that's just silly
                self.log("hostname == IP: adding new host by IP only: %s"%hostip)
                host=node.new_host(hostip)
            
            hostPorts = []
            for port in handler.mapping[i]['ports']:
                hostPorts.append(str(port['port']))
            hostPorts.sort()
            host.add_to_knowledge("TCPPORTS", hostPorts)
            portString = ""
            logString = ""
            for port in hostPorts:
                portString += port + ", "
            # That weird error in self.log makes me do this
            logString = "Added ports: %s"%portString[0:-2]
            logString += " for host: %s"%str(hostip)
            self.log(logString)
            
        return 1
    
    def parseNessus3(self):
        """
        Opens Nessus3 (nsr or nbe) formated files and extracts hosts
        """
        rawNodes = []
        hostsPorts = {} # {ip/hostname:[openports]}
        hostsCVE = {} # {ip/hostname:[CVE]}
        rawPorts = []
        tempVulnList = []
        skipHosts = 0
        try:
            file = open(self.filename, 'r')
        except:
            self.log("Couldn't find file %s exiting..."%self.filename)
            return 0
        data = file.read()
        file.close()
        data = data.splitlines()
        
        # Set the list member we want after our split
        if re.search('nsr', self.filetype):
            offset = 0
        elif re.search('nbe', self.filetype):
            offset = 2
        else:
            self.log("Unknown filetype: %s exiting module..."%self.filetype)
            return 0
        
        #
        # Bail out if HTML tags are found
        html = ["<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\">",
                "<META content=3D\"text/html; charset=3Dwindows-1255"]
        
        for failout in html:
            if failout in data or data[-1] == "</PRE></BODY></HTML>":
                self.log("HTML reporting found in file, imported file must be plain .nsr or .nbe")
                return 0
            
        #
        # Snag the hosts
        for lines in data:
            if len(rawNodes) > 0:
                for knownHost in hostsPorts.keys():
                    if lines.split("|")[offset] == knownHost:
                        break
                    hostsPorts[lines.split("|")[offset]] = []
            elif len(rawNodes) == 0 and lines.split("|")[offset] != "":
                # Seed our first host
                hostsPorts[lines.split("|")[offset]] = []
            
        for lines in data:
            if re.search('tcp\)\Z', lines):
                rawPorts.append(lines)
        
        # 
        # Grab all the ports, sort them, append to dict
        for host in hostsPorts.keys():
            tempPorts = []
            for lines in rawPorts:
                if re.search(host, lines):
                    temp = lines.split(" (")
                    port = re.findall("[-+]?\d+", temp[1])
                    tempPorts.append(int(port[0]))
            tempPorts.sort()
            if len(tempPorts) == 0:
                tempPorts.append('No ports found')
            for port in tempPorts:
                hostsPorts[host].append(port)
        
        #
        # Add to KB then print it out all pretty like
        node = self.argsDict["passednodes"][0]
        self.log("Importing {host : [ports]} into CANVAS:")
        if len(hostsPorts) > 10:
            loopCtrl = True
        else:
            loopCtrl = False
        for hosts in hostsPorts.keys():
            newhost=node.new_host(hosts)
            if hostsPorts[hosts][0] == 'No ports found' and loopCtrl == True:
                skipHosts += 1
            elif hostsPorts[hosts][0] != 'No ports found' or loopCtrl == False:
                ports = ''
                for port in hostsPorts[hosts]:
                    if port != 'No ports found':
                        newhost.add_to_knowledge("TCPPORTS",[port])
                    ports = ports + str(port) + ", "
                ports = ports[0:len(ports)-2] # Trim final ", "
                temp = "\t{%s : [%s]}"%(hosts, ports)
                self.log(temp)
        
        #       
        # This groups 3 vulns per line into the KB so you'll get:
        # NESSUSVULNS1 [CVE-2008-0001, CVE-2008-0002, CVE-2008-0003] etc
        if self.importCVE:        
            # Find CVE numbers
            for hosts in hostsPorts.keys():
                hostsCVE[hosts] = []
                for lines in data:
                    if re.search(hosts, lines):
                        tempVulnList = re.findall('CVE[- ]?[-+]?\d+[- ]?[-+]?\d+', lines)
                    if len(tempVulnList) > 0:
                        for cve in tempVulnList:
                            hostsCVE[hosts].append(str(cve))
                if len(hostsCVE[hosts]) == 0:
                    hostsCVE[hosts].append('None found')
                    
            temp = {}
            cveDict = self.getCVEList()
            guiCounter = 0 # Make this show up all nice like in the GUI
            for hosts in hostsCVE.keys():
                newhost=node.new_host(hosts)
                vulns = ''
                for cve in hostsCVE[hosts]:
                    if cveDict.has_key(cve):
                        vulns = vulns + cveDict[cve] + ', '
                        guiCounter += 1
                        if guiCounter%3 == 0:
                            self.log("[%s] may be vulnerable to: %s"%(hosts, vulns))
                            newhost.add_to_knowledge("NESSUSVULNS" + str(guiCounter/3),[vulns[0:-2]])
                            vulns = ''
                        
                if guiCounter == 0 and vulns == '':
                    self.log("[%s] Nessus found no vulnerabilities which are also CANVAS modules"%hosts)
 
        return
    
    def getCVEList(self):
        #
        # Return a dict where {cve number : module name}
        #
        canvasengine.registerAllModules()
        exploitmods_old = canvasengine.exploitmodsGet(False)
        bunkList = ["N/A", '', 'Unknown' , 'Unkown', 'None', 'None/SilentlyPatched']
        cveDict = {}
        skipList = 0
        for key in exploitmods_old.keys():
            try:
                exploitmods_old[key].DOCUMENTATION["CVE Name"]
                if exploitmods_old[key].DOCUMENTATION["CVE Name"] not in bunkList:
                    cveDict[exploitmods_old[key].DOCUMENTATION["CVE Name"]] = key
            except:
                skipList += 1
        self.log("Found %d modules with CVEs, skipped %d"%(len(cveDict), skipList))
        return cveDict
    
    def usage(self):
        print "="*10
        print "This module imports information from a Nessus scan into the CANVAS GUI."
        print "Usage: nessusxml.py -O filename:myscan.nbe -O filetype:nessus3-nbe"
        print "\t-O filename:<filename to import> \n\t-O filetype:<nessus3-nsr, nessus3-nbe, nessus2-new>"
        print "="*10
        
    def run(self):
        self.filename = self.argsDict.get("filename",self.filename)
        self.filetype = self.argsDict.get("filetype", self.filetype)
        self.filetype = self.filetype.lower()
        if self.filetype == "":
            self.log("You must select a file type, exiting ...")
            return 0
        if self.filename == "":
            print "No filename"
            return 0
        self.log("Importing scan from file %s using %s template"%(self.filename, self.filetype))       

        if re.search('nessus3', self.filetype):
            self.parseNessus3()
        elif re.search('nessus2', self.filetype):
            self.parseNessus2()
        elif self.filetype.lower() == "nmap":
            self.log("nmap not supported with this module")
        else:
            self.log("Unknown filetype: \"%s\" ... exiting"%self.filetype)
            return 0
        
        return 1

if __name__== '__main__':
    print "Running CANVAS %s Exploit v %s"%(DESCRIPTION,VERSION)
    app = theexploit()
    ret = standard_callback_commandline(app)

        
                
                  


    
        
    
    
