#! /usr/bin/env python



#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2002-2004
#http://www.immunityinc.com/CANVAS/ for more information

import sys
#covers both angles
sys.path.append(".")
sys.path.append("../../")
sys.path.append('../../encoder')
sys.path.append('./encoder')
sys.path.append("../../shellcode")
sys.path.append("./shellcode")
sys.path.append("../../gui")
sys.path.append("./gui")


import os,getopt
import socket
from exploitutils import *
import addencoder
import win32shell
from canvasexploit import canvasexploit
import canvasengine
from canvasengine import socket_save_list
import time
import shellcodeGenerator


NAME="getkey"
DESCRIPTION="Get a key from the remote host"
DOCUMENTATION={}
#QO44056 fixes this?
VERSION="1.0"
GTK2_DIALOG="dialog.glade2"

affectsList=["Commands"]

runAnExploit_gtk2=canvasengine.runAnExploit_gtk2
runExploit=canvasengine.runExploit


class theexploit(canvasexploit):
    def __init__(self):
        canvasexploit.__init__(self)
        self.result=""
        self.name=NAME
        self.hkey="HKEY_LOCAL_MACHINE"
        self.key="SYSTEM\\CurrentControlSet\\Control\\ProductOptions"
        self.subkey="ProductType"
        return

    def run(self):
        self.setInfo("%s (in progress)"%(NAME))
        hkey=self.argsDict.get("hkey",self.hkey)
        key=self.argsDict.get("key",self.key)
        subkey=self.argsDict.get("subkey",self.subkey)
        self.log("getkey: hkey=%s key=%s subkey=%s"%(self.hkey,self.key,self.subkey))
        
        for node in self.argsDict["passednodes"]:
            type=node.nodetype
            
            if "win32api" not in node.capabilities:
                #skip nodes we don't support...
                self.log("Node %s: %s node type not supported"%(node.getname(),type))
                continue
            hkey2= node.shell.RegOpenKeyEx(hkey, key, "KEY_QUERY_VALUE")

            ret= node.shell.RegQueryValueEx(hkey2, subkey)

            self.log("result: %s" % prettyprint(ret[2]))
                
        #     self.log("current file: %s"% self.result)
        self.setInfo("%s success getting key: <%s\%s\%s  "%(NAME, hkey, key, subkey))
        return 1


def usage():
    app=theexploit()
    print "Usage: "+sys.argv[0]+" [-T (for test)] -t target [-p port:"+str(app.port)+"] [-v version:1] -l localip -d localport "

    app.displayVersions()
    sys.exit()


if __name__ == '__main__':
    app = theexploit()
    ret=standard_callback_commandline(app)
