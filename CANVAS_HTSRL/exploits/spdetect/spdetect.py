#! /usr/bin/env python

#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2006-2007
#http://www.immunityinc.com/CANVAS/ for more information

import sys
if '.' not in sys.path: sys.path.append('.')

import socket
from exploitutils import *
import time

from canvasexploit import canvasexploit
from tcpexploit import tcpexploit
from msrpc import *

import canvasengine

NAME='Windows Service Pack Detection'
DESCRIPTION='Windows Service Pack Detection'
DOCUMENTATION={}
DOCUMENTATION['Notes']=''
PROPERTY={}
PROPERTY['TYPE']='Recon'
PROPERTY['SITE']='Remote'

VERSION='1.1'

NOTES="""
"""

class theexploit(tcpexploit):
    def __init__(self):
        tcpexploit.__init__(self)
        self.port=135
        self.name=NAME
        self.UUID=''
        self.opnum=0
        self.baseos=''
        self.servicepack=[]
        return

    def getArgs(self):
        self.host=self.target.interface
        self.port=int(self.argsDict.get('port',self.port))
        return 

    def test(self):
        self.getArgs()
        self.log('SPDetect test running on port %s'%(self.port))
        error,s=msrpcbind(self.UUID,0,0,self.host,self.port,1)
        if error==0:
            self.log('Could not bind to the MSRPC epmapper')
            return 0
        self.log('Connection to the MSRPC epmapper successful')
        return 1

    def getEndpoints(self,UUID):
        module=self.engine.getModuleExploit('dcedump')
        module.link(self)
        connectionList=module.getEndpointbyUUID(UUID)
        print connectionList
        return connectionList

    def getSPInfo(self):
        #FOR TESTING PURPOSE WE ADD SEVERAL TIMES THE SAME INFORMATION TO THE LIST
        #DO NOT CHANGE THAT YET PLEASE!
        if self.baseos.count('XP')>0:
            connectionList=self.getEndpoints('0a74ef1c-41a4-4e06-83ae-dc74fb1cdd53')
            if len(connectionList)==0: #anonymously we didn't get anything back, so SP2 it is
                self.servicepack.append('SP2')
                return
            connectionList=self.getEndpoints('5a7b91f8-ff00-11d0-a9b2-00c04fb6e6fc')
            for endpoint in connectionList:
                if endpoint.count('[\\PIPE\\AudioSrv]')>0:
                    if endpoint.count("ncalrpc:[senssvc]")==0:
                        #the System Event Notification does not listen on the ncalrpc interface on my XP SP0 Pro
                        self.servicepack.append('SP0')
                        break
                elif endpoint.count('ncalrpc:[AudioSrv]')>0:
                    self.servicepack.append('SP1')
                    break
            connectionList=self.getEndpoints('4b112204-0e19-11d3-b42b-0000f81feb9f') #requires someone to have logged on locally
            found=False
            for endpoint in connectionList:
                if endpoint.count('[\\PIPE\\DAV RPC SERVICE]')>0:
                    self.servicepack.append('SP1')
                    found=True
                    break
            if found==False:
                self.servicepack.append('SP0')
        elif self.baseos.count('2000')>0:
            connectionList=self.getEndpoints('5a7b91f8-ff00-11d0-a9b2-00c04fb6e6fc')
            for endpoint in connectionList:
                if endpoint.count('ncalrpc:[DNSResolver]')>0:
                    self.servicepack.append('SP3')
                    self.servicepack.append('SP4')
                    break
                #the rest if either SP0,SP1,SP2 or SP2,SP3,SP4 with MS03-043
                
        return

    def runDetect(self, known_os=None):
        self.getArgs()
        self.log('Running Service Pack detection routines on %s:%s'%(self.host,self.port))
        self.log('SP Detection starting')
        if not known_os:
            known_os=self.target.get_knowledge('OS')
            if not known_os:
                self.exploitnodes("osdetect")
                known_os=self.target.get_knowledge('OS')
                if not known_os:
                    return 'Unknown'
            self.baseos=known_os.known
        else:
            #we were passed in a canvasos object
            self.baseos=known_os
        self.getSPInfo()
        self.servicepack=uniquelist(self.servicepack)
        if len(self.servicepack)==1:
            #if we found just one, let's put it in there!
            self.baseos.servicepack=self.servicepack[0]
        self.result=self.servicepack
        return self.servicepack

    def run(self):
        self.getArgs()
        self.log('Running SPDetect on %s:%s'%(self.host,self.port))
        self.setInfo('%s attacking %s:%s'%(NAME,self.host,self.port))
        ret=self.runDetect()
        self.log('Service Pack: %s'%(ret))
        self.setInfo('%s attacking %s:%s (done)'%(NAME,self.host,self.port))
        return 1

    def usage(self):
        print 'Usage: '+sys.argv[0]+' [ -T ] -t target [ -p port ]'
        sys.exit()

if __name__=='__main__':
    print 'Running CANVAS '+NAME+' version '+VERSION
    app=theexploit()
    ret=standard_callback_commandline(app)        
