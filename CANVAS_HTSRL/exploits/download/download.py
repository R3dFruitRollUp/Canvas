#! /usr/bin/env python

# Proprietary CANVAS source code - use only under the license agreement
# specified in LICENSE.txt in your CANVAS distribution
# Copyright Immunity, Inc, 2002-2008
# http://www.immunityinc.com/CANVAS/ for more information

import sys
if "." not in sys.path: sys.path.append(".")

import os,getopt
import socket
from exploitutils import *
from canvaserror import *

from canvasexploit import canvasexploit
import canvasengine
import time

NAME                = "download"
DESCRIPTION         = "Download file. Uses first selected node."
DOCUMENTATION       = {}
VERSION             = "1.0"
PROPERTY            = {}
PROPERTY['TYPE']    = "Commands"
PROPERTY['SITE']    = "Remote"
PROPERTY['ARCH']    = [ ["All"] ]

class theexploit(canvasexploit):
    def __init__(self):
        canvasexploit.__init__(self)
        self.result             = ""
        self.name               = NAME
        self.supportedNodeArgs  =[["LocalNode",
                                "UnixShellNode",
                                "win32Node",
                                "linuxNode", 
                                "osxNode", 
                                "solarisNode"]]
        self.source             = "/doesnotexist"
        return

    def run(self):
        results     = []
        rv          = 0
        source      = self.argsDict.get("source",self.source).strip()
        outputdir   = "Your_Documents/"

        self.setInfo("%s (in progress)" % (NAME))

        try:
            os.stat(outputdir)
        except OSError:
            self.log("Could not find %s so creating it" % outputdir)
            try:
                os.mkdir(outputdir)
            except (OSError, IOError), i:
                e           = "Failed to create output directory %s: %s" % (outputdir, str(i))
                self.result = e
                rv          = 0
                self.log(e)
                self.setInfo("%s - done (failed: %s)"%(NAME, self.result))
                return rv

        # ACCOUNT FOR BOTH SEPERATORS
        if source.rfind("/") != -1:
            directory   = outputdir+ source[source.rfind("/")+1:]
        else:
            directory   = outputdir + source

        if source.rfind("\\") != -1:
            directory   = outputdir+ source[source.rfind("\\")+1:]
        else:
            directory   = outputdir + source
            
        for node in self.argsDict["passednodes"]:
            if node.nodetype in self.supportedNodeArgs[0] or "download" in node.capabilities:
                self.log("Downloading %s on node %s"%(source,node.getname()))
                try:
                    r   = node.download(source, directory )
                    results.append((True, str(r)))
                except NodeCommandError, i:
                    e   = "Failed to download on node %s: %s" % (node.getname(), i)
                    self.log(e)
                    results.append((False, e))                                    
            else: 
                results.append((False, e))
                e   = "%s node type not supported"%type
                self.log(e)
        
        self.result     = ", ".join([ x[1] for x in results])
        
        if reduce(lambda x,y: x and y, [ z[0] for z in results ], True):
            rv  = 1
            self.setInfo("%s - done (success)"%(NAME))
        else:
            rv  = 0
            self.setInfo("%s - done (failed: %s)"%(NAME, self.result))
                                
        self.log("Download finished")
        return rv

