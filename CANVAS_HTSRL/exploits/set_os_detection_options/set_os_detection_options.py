#! /usr/bin/env python

"""
set_os_detection_options.py (TEMPLATE for configuration setting modules)

"""

#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2002-2006
#http://www.immunityinc.com/CANVAS/ for more information

import socket
import getopt
import sys
from engine.config import *
import canvasengine

if "." not in sys.path:
    sys.path.append(".")



from canvasexploit import canvasexploit
from exploitutils import *
import canvasengine

DOCUMENTATION={}
DOCUMENTATION["Notes"]="""Exploits can query the CANVAS engine's preference for their
operation. There are three choices if getremotelanguage cannot determine the language to the level
they need:

Assume a remote Windows machine is of a particular language
Assume the current target is most similar to its nearest neighbors
Don't run an exploit that does not have the information it needs
"""

#DOCUMENTATION["Date public"]="00/00/0000"
#DOCUMENTATION["CERT Advisory"]=""
#DOCUMENTATION["CVE Name"]=""
#DOCUMENTATION["References"]=""

DESCRIPTION="Set the osdetection configuration information"
VERSION="1.0"

#affectsList=["Recon"]
PROPERTY = {}
PROPERTY['TYPE'] = "Configuration"

NAME="set osdetect config"

class theexploit(canvasexploit):
    def __init__(self):
        canvasexploit.__init__(self)
        
        self.name=NAME
        self.osdetect_mode=canvasengine.canvasengine.ASSUME_NO_RUN
        self.osdetect_lang="English"
        return
   
    def getargs(self):
        """Gets arguments"""
        self.osdetect_mode=self.argsDict.get("osdetect_mode",self.osdetect_mode)
        self.osdetect_lang=self.argsDict.get("osdetect_lang",self.osdetect_mode)
        return
    
    def run(self):
        """
        runs the attempt to set configuration
        """
        if not self.engine:
            self.log("No engine for this configuration module...not setting anything")
            return 0

        self.getargs()
        
        self.log("Setting osdetect lang to %s"%self.osdetect_lang)
        self.engine.osdetect_lang=self.osdetect_lang
        self.log("Setting osdetect mode to %s"%self.osdetect_mode)
        self.engine.osdetect_mode=self.osdetect_mode
        return 1
    
if __name__ == '__main__':
    app = theexploit()
    ret=standard_callback_commandline(app)
