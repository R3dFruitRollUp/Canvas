----------------------------------------------------------------
Documentation for use of 3rd Party Exploit packs with CANVAS.
----------------------------------------------------------------

As of version 6.31, CANVAS Professional has support for 3rd party exploit packs. These allow exploit and tool vendors other than Immunity to easily extend CANVAS to provide extra exploits or functionality.

Exploit packs should be decompressed into the directory 3rdparty/ off the CANVAS install directory, or in a directory configured via the exploit_pack_dirs configuration directive in canvas.conf. (You can also specify a path to an exploit pack directory via the EXPLOITPACKDIRS environment variable.) These directories contain one directory per exploit pack, each of which must have a 'package.info' metadata file describing the exploit pack. 

During loading, CANVAS will check the exploit pack directories, and load them. The first time you use an exploit pack, you will be presented with a dialog with the documentation for the exploit pack, it's license and other important information. A new entry "3rd Party" in the exploits tree in the main GUI will provide access to the new functionality. You can review your list of installed exploit packs at any time by double clicking on the "3rd Party" entry in the exploits tree list in the GUI.

Note that 3rd party exploit packs, are, as their name suggests, not provided or supported by Immunity. Please address all enquiries or support requests to the authors contact details, as listed in the Exploit Pack info dialog. 

----------------------------------------------------------------
Develeoper Information
----------------------------------------------------------------

To distribute your tools or exploits as a CANVAS compatible exploit pack, you should package your code in a tree as follows:

 PACK_NAME/
 PACK_NAME/package.info
 PACK_NAME/readme.txt
 PACK_NAME/license.txt
 PACK_NAME/libs/
 PACK_NAME/exploits/
 PACK_NAME/exploits/prefix_module/
 PACK_NAME/exploits/prefix_module/prefix_module.py
 PACK_NAME/exploits/prefix_module/dialog2.glade

The package.info file contains metadata configuring the package in CANVAS, and this must be correctly populated in order to operate. A sample package.info file is provided below:

--------------

# CANVAS Third Party Exploit Pack Meta Data

[main]
name = VulnPack2000
longName = Vuln Pack 2000, Enterprise Edition
author = Bobs Vulnerability Emporium
version = 7.3
demo = Yes
contactUrl = http://www.bobsve.bob
contactEmail = support@bobsve.bob
contactPhone = +123456789
# Filenames of README and LICENSE
license = license.txt
readme = readme.txt
# This directory and all subdirs are pushed into the python sys.path
libdirs = libs  

# one of these per path that has exploits in it
[exploits]

--------------

This information is parsed and made available to the user via the GUI. 

If you wish, you can provide a "Demo" version of your exploit pack which does not contain the full exploits. These exploits should have a working test function, and a stubbed exploit function that logs the fact that they do not contain full functionality. In this manner, the users will be able to test which systems are vulnerable, and purchase the full exploits as required. 

If two packs with the same name value are installed, the full version will be used instead of the demo version. 

Library functionality used by the exploit pack may be located in a directory listed in the libdirs configuration directive (this is parsed as a list of comma separated directories) and all directories and subdirectories will be inserted into the python sys.path value, so you can load these easily. 

Exploits may be split into multiple directory trees, and each directory which contains module directories must be listed in the configuration file in square brackets. No distinction is made in the GUI between exploits loaded from different trees - the structure in the GUI is derived from the modules themselves, not the path. 

CANVAS module names must be unique, so please prefix all your modules with some value specific to your exploit pack, so that users do not experience problems when mixing your packs with other vendors. 

All new modules should use the new style PROPERTY dictionary definitions, rather than the older affectsList, as this will provide better categorisation in the GUI, and more intelligent use of your exploits during automated attacks. 

All end-user accessible modules should also include a dialog2.glade GUI definition. 

Readme and License files should be plain ascii or UTF-8. 

If you have external dependancies (e.g. other systemwide python modules) then your instal script or documentation should make the user aware of this. 

