#! /usr/bin/env python



#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2002-2004
#http://www.immunityinc.com/CANVAS/ for more information

import sys
#covers both angles
sys.path.append(".")
sys.path.append("../../")
sys.path.append('../../encoder')
sys.path.append('./encoder')
sys.path.append("../../shellcode")
sys.path.append("./shellcode")
sys.path.append("../../gui")
sys.path.append("./gui")


import os,getopt
import socket
from exploitutils import *
import addencoder
import win32shell
from canvasexploit import canvasexploit
import canvasengine
from canvasengine import socket_save_list
import time
import shellcodeGenerator


NAME="killprocess"
DESCRIPTION="Sends a terminate signal to the process identified by a PID"
DOCUMENTATION={}
#QO44056 fixes this?
VERSION="1.0"
GTK2_DIALOG="dialog.glade2"

affectsList=["Commands"]

runAnExploit_gtk2=canvasengine.runAnExploit_gtk2
runExploit=canvasengine.runExploit


class theexploit(canvasexploit):
    def __init__(self):
        canvasexploit.__init__(self)
        self.result=""
        self.name=NAME
        self.pid=0
        return

    def run(self):
        self.setInfo("%s (in progress)"%(NAME))
        self.result=[]
        pid=dInt(self.argsDict.get("pid",self.pid))
        if self.pid==0:
             self.log("Need to specify a pid")
             return 0
        self.log("Killing PID %d (0x%x)"%(pid,pid))
        for node in self.argsDict["passednodes"]:
            if "win32api" in node.capabilities:
                self.result=node.shell.dokillprocess(pid)
                if self.result==-2:
                    self.log("Unable to OpenProcess")
                elif self.result==-1:
                    self.log("Unable to TerminateProcess")
            elif "Unixshell" in node.capabilities:
                self.result=node.runcommand("kill -9 %d"%pid)
            else:
                self.log("%s node type not supported"%node.nodetype)
                return 0
                
        self.log("results: %s"%self.result)
        self.setInfo("%s - done (success: %s)"%(NAME,self.result))
        return 1
