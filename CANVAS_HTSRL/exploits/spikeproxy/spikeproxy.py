#! /usr/bin/env python

#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2002-2006
#http://www.immunityinc.com/CANVAS/ for more information

"""
This module will let you run SPIKE Proxy, pretending you are on a remote box.
Being able to browse as if you were on a remote box is cool in and of itself,
but the real goal is being able to hack web applications as if you were on that
box.
"""

import sys
#covers both angles
if "." not in sys.path: sys.path.append(".")


from exploitutils import *
from canvasexploit import canvasexploit
from libs import spkproxy


NAME="spikeproxy"
DESCRIPTION="Run a web proxy as if you were on a remote box, with specialized attack functionality"
DOCUMENTATION={}

VERSION="1.0"

PROPERTY = {}
PROPERTY['TYPE'] = "Servers"


class theexploit(canvasexploit):
    def __init__(self):
        canvasexploit.__init__(self)
        self.result=""
        self.name=NAME
        self.port=8080
        
        self.proxyhost=None
        self.proxyport=None
        self.options=["Use HTTP://spike/ to view the online interface and Ctrl-C to exit"]
        return

    def getargs(self):
        """Get the arguments for this exploit"""
        self.port=int(self.argsDict.get("port",self.port))
        self.proxyhost=self.argsDict.get("proxyhost", self.proxyhost)
        self.proxyport=self.argsDict.get("proxyport", self.proxyport)
        if self.proxyport:
            self.proxyport=int(self.proxyport)
        
        self.host=self.target.interface
        
    def usage2(self):
        """Print a pretty usage statement - not pretty enough yet, so not used"""
        self.log("Usage for this exploit:")
        self.log("By default SPIKE Proxy will listen on port 8080")
        self.log("use -p <some other port> to change this")
        self.log("Once SPIKE Proxy is running, use Control-C to exit and ")
        self.log("http://spike/ to view the online interface")
        return
        
    def run(self):
        self.setInfo("%s (in progress)"%(NAME))
        self.getargs()
        self.log("Listening on host %s port %d"%(self.host,self.port))
        app=spkproxy.spkProxy()
        app.setPort(self.port)
        app.setListenHost(self.host)
        if self.proxyhost:
            app.setProxyHost(self.proxyhost)
        if self.proxyport:
            app.setProxyPort(self.proxyport)
        
        app.exploit=self
        app.run()
        self.setInfo("%s - done (running)"%(NAME))
        import time
        while 1:
            time.sleep(5)
            if self.getState()==self.HALT:
                app.done=1
        self.setInfo("%s - done (finished)"%(NAME))
        return 1


def usage():
    app=theexploit()
    print "Usage: "+sys.argv[0]+" [-T (for test)] -t target [-p port:"+str(app.port)+"] [-v version:1] -l localip -d localport "

    app.displayVersions()
    sys.exit()


if __name__ == '__main__':
    print "Running CANVAS %s Exploit v %s"%(DESCRIPTION,VERSION)
    app = theexploit()
    ret=standard_callback_commandline(app)
    
