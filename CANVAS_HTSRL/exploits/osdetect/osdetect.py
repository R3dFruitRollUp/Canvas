#!/usr/bin/env python

# re-factored os detect
# protocol based os detect modules are in CANVAS/osdetect/

import sys

if '.' not in sys.path: 
    sys.path.append('.')

NAME = "OS Detect"
DOCUMENTATION = {}

DESCRIPTION = "OS Detection"
VERSION = "1.0"

DOCUMENTATION = {}
DOCUMENTATION['NOTES'] ="""

This module wraps many methods of detecting the remote operating system for
your current target. In particular it will look at MSRPC endpoints,
SMB versions, HTTP banners, dtspcd, SSH, and other things to 
attempt to determine what operating system and operating system release
the target is running.

This does not currently send packets with weird TCP flags at the target.

"""

PROPERTY = {}
PROPERTY['TYPE'] = "Recon"
PROPERTY['SITE'] = "Remote"

from exploitutils import *
from tcpexploit import tcpexploit
import libs.canvasos as canvasos

# CANVAS/osdetection/
from osdetection.rpc import rpcdetect
from osdetection.dtspcd import dtspcd_detect
from osdetection.smb import smbdetect
from osdetection.sql import sqldetect
from osdetection.ftp import ftpdetect
from osdetection.http import httpdetect
from osdetection.telnet import telnetdetect
from osdetection.smtp import smtpdetect
from osdetection.language import languagedetect
from osdetection.servicepack import spdetect
from osdetection.local import localdetect
from osdetection.ssh import sshdetect
from osdetection.mdns import mdnsdetect

class theexploit(tcpexploit,\
                 rpcdetect,\
                 dtspcd_detect,\
                 smbdetect,\
                 sqldetect,\
                 ftpdetect,\
                 httpdetect,\
                 telnetdetect,\
                 sshdetect,\
                 smtpdetect,\
                 languagedetect,\
                 spdetect,\
                 localdetect,\
                 mdnsdetect):

    def __init__(self):

        # inits
        tcpexploit.__init__(self)
        rpcdetect.__init__(self)
        dtspcd_detect.__init__(self)
        sqldetect.__init__(self)
        ftpdetect.__init__(self)
        httpdetect.__init__(self)
        telnetdetect.__init__(self)
        smtpdetect.__init__(self)
        languagedetect.__init__(self)
        spdetect.__init__(self)
        localdetect.__init__(self)
        sshdetect.__init__(self)
        spdetect.__init__(self)
        mdnsdetect.__init__(self)

        # local vars
        self.no_language_check = False
        self.node = None
        self.host = ''
        self.known = False
        self.result = None # used for autoversioning

        # check control .. so we can enable/disable from the gui
        self.rpc = True
        self.dtspcd = True 
        self.smb = True
        self.language = True
        self.telnet = True
        self.ssh = True
        self.ftp = True
        self.smtp = True
        self.sp = True
        self.http = True
        self.sql = False
        self.mdns = True
        self.ipfi = True

        # via for setinfo
        self.via = []
        self.num_of_tests = 10.0 # number of tests set to true
        self.prog_step = 100.0/self.num_of_tests
        self.prog_perc = 0.0

        return


    def incr_prog(self, mod):
        # actually increase the progress
        self.prog_perc += self.prog_step
        self.setProgress(self.prog_perc)
        self.setInfo("OSDETECT - %s" % mod)
        return

    def known_os_check(self, target):
        """ see if we already know about the target OS """

        if target.get_knowledge('OS') != None:
            return True
        else:
            return False

    def get_args(self):
        """ init main args """

        self.node = self.argsDict['passednodes'][0]
        if not self.target.interface:
            self.log('XXX: target.interface needs to be set for OS detect!')
        self.host = self.target.interface
        self.target.add_knowledge('IP', self.host, 100)
        self.no_language_check = self.argsDict.get('nolanguagedetect', self.no_language_check)
        self.getarg("smb")
        self.getarg("http")
        self.getarg("mdns")
        self.getarg("ssh")
        return

    def os_detect(self, host, node):
        """ main os detect logic """

        result = None

        # check if we already know about the OS
        if self.known_os_check(self.target) == True:
            self.log('Already know about OS for target ...')
            self.known = True
            return None

        # check if we're doing an OS detect on local host
        if host in ['127.0.0.1']:
            result = self.run_localdetect()

        # smb checks
        if self.smb == True and not result:
            self.incr_prog('SMB')
            result = self.run_smbdetect()
            if result:
                self.via += ['SMB']

        # rpc checks
        if self.rpc == True and not result:
            self.incr_prog('RPC')
            result = self.run_rpcdetect()
            if result:
                self.via += ['RPC']

        # smtp checks
        if self.smtp == True and not result:
            self.incr_prog('SMTP')
            result = self.run_smtpdetect()
            if result:
                self.via += ['SMTP']

        # sql checks
        if self.sql == True and not result:
            self.incr_prog('SQL')
            result = self.run_sqldetect()
            if result:
                self.via += ['SQL']

        # ftp checks
        if self.ftp == True and not result:
            self.incr_prog('FTP')
            result = self.run_ftpdetect()
            if result:
                self.via += ['FTP']

        # http checks
        if self.http == True and not result:
            self.incr_prog('HTTP')
            result = self.run_httpdetect()
            if result:
                self.via += ['HTTP']

        # dtspcd for Solaris
        if self.dtspcd and not result:
            self.incr_prog("DTSPCD")
            result=self.do_dtspc()
            if result:
                self.via+=["DTSPCD"]
                
        # telnet checks
        if self.telnet == True and not result:
            self.incr_prog('TELNET')
            result = self.run_telnetdetect()
            if result:
                self.via += ['TELNET']

        # ssh checks
        if self.ssh == True and not result:
            self.incr_prog('SSH')
            result = self.run_sshdetect()
            if result:
                self.via += ['SSH']

        # mdns checks
        if self.mdns == True and not result:
            self.incr_prog('MDNS')
            result = self.run_mdnsdetect()
            if result:
                self.via += ['MDNS']
                
        if self.ipfi == True and not result:
            self.incr_prog('IPFI')
            result = self.run_ipfingerprint()
            if result:
                self.via += ['IPFI']
        return result
    
    def run_ipfingerprint(self):
        """
        Run ipfingerprint and parse it
        """
        app=self.engine.getModuleExploit("ipfingerprint")
        app.link(self)
        ret=app.run()
        result=app.result
               
        app=self.engine.getModuleExploit("ipheuristic")
        app.link(self)
        app.argsDict["results"]=result
        ret=app.parse_results(result)
        return ret
    
    def run(self):
        self.get_args()
        self.setInfo('OS Detecting -> %s' % self.host)

        # main os base detection
        os = self.os_detect(self.host, self.node)

        # windows service pack detection ...
        if os and os.base.lower() in ['windows'] and self.sp == True:
            self.log('OS DETECT: running Service Pack detection ...') 
            self.incr_prog('ServicePack')
            os = self.run_spdetect(os=os)

        # windows language detection
        if os and os.base.lower() in ['windows'] and self.no_language_check != True:
            self.log('OS DETECT: running Language detection ...')
            self.incr_prog('Language')
            os = self.run_languagedetect(os=os)
            
        # can't determine target OS
        if not os and self.known == False:
            self.log('OS DETECT: Unable to determine OS ...')
            self.setInfo('OS DETECT: Unable to determine OS ...')
            self.target.add_knowledge('OS', canvasos.canvasos('Unknown'), 0)
            self.setProgress(100.0)
            return 0 # unable to determine ..

        # only add when we dont know ...
        if self.known == False:
            self.target.add_knowledge('OS', os, 100)
            self.setInfo("%s Found:  %s->%s (Via: %s)" % (NAME, self.host, str(os), ','.join(self.via)))
            self.log("%s Found:  %s->%s (Via: %s)" % (NAME, self.host, str(os), ','.join(self.via)))

            ##Print out sexy dataview formatted code
            self.do_data_view(col_title=["Host", "OS"], data=[[self.host,str(os)]])

        else:
            # get known knowledge
            ret = self.target.get_knowledge('OS')
            if ret:
                os = ret.known
                self.setInfo("%s Found:  %s->%s" % (NAME, self.host, str(os)))
                self.log("%s Found:  %s->%s" % (NAME, self.host, str(os)))

                ##Print out sexy dataview formatted code
                self.do_data_view(col_title=["Host", "OS"], data=[[self.host,str(os)]])

            else:
                self.setProgress(100.0)
                return 0 # unable to determine ...

        # self.result is used in autoversioning ..
        self.result = os
        self.setProgress(100.0)
        return 1

if __name__ == '__main__':
    print "Running CANVAS %s %s"%(DESCRIPTION,VERSION)
    app = theexploit()
    ret = standard_callback_commandline(app)
