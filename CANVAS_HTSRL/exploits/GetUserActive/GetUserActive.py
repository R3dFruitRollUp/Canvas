#! /usr/bin/env python

#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2002-2004
#http://www.immunityinc.com/CANVAS/ for more information

import sys
#covers both angles
if "." not in sys.path:
    sys.path.append(".")

import os,getopt
import socket
from exploitutils import *
import canvasengine
import time
from canvasexploit import canvasexploit

NAME                            = "GetUserActive"
DESCRIPTION                     = "This module attempts to determine if a user is actively moving the mouse or typing on all selected nodes."
VERSION                         = "1.0"

DOCUMENTATION                   = {}
DOCUMENTATION["Commandline"]    = "To use this from the commandline within a MOSDEF interface use:\nrunmodule GetUserActive -t 1\n"
DOCUMENTATION["Notes"]          = "This module will return success (blue) if it has been able to determine the state for all selected nodes"

PROPERTY                        = {}
PROPERTY['TYPE']                = "Commands"
PROPERTY['SITE']                = "Local"
PROPERTY['ARCH']                = [ ["Windows"] ]

class theexploit(canvasexploit):
    def __init__(self):
        canvasexploit.__init__(self)
        self.result = ""
        self.name   = NAME
        return
    
    def run(self):
        self.setInfo("%s (in progress)" % (NAME))
        node = self.argsDict["passednodes"][0]

        self.result = []
        success     = 1

        for node in self.argsDict["passednodes"]:
            nodetype = node.nodetype
            capabilities = node.capabilities
            if "win32api" in capabilities:
                ret = node.shell.GetUserActive()
                #ret is in milliseconds
                self.log("It has been %d seconds since this machine was last typed on or had the mouse moved" % (ret/1000))
                self.result += [ret]
                if ret<3000:
                    self.log("Determined node %s had user activity in last 3 seconds!" % node.get_name())
                else:
                    self.log("Determined node %s was not active" % node.get_name())
            else:
                self.log("The node named %s of type %s does not have the capabilities needed to run this command" % (node.get_name(),nodetype))
                self.result += [0]
                #We return success if we have been able to find out
                #the state of ALL nodes.
                success = 0

        self.dispshellcmd = self.command
        self.setInfo("%s - done" % (NAME))
        return success
    
