#! /usr/bin/env python



#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2002-2004
#http://www.immunityinc.com/CANVAS/ for more information

import sys
#covers both angles
if "." not in sys.path:
    sys.path.append(".")

import os,getopt
import socket
from exploitutils import *
from canvasexploit import canvasexploit
import canvasengine
from canvasengine import socket_save_list
import time



NAME="getpriv"
DESCRIPTION="Enables a privilege"
DOCUMENTATION={}
DOCUMENTATION["NOTES"]="Enables a privilege. Use this if you get -1 when using processinject."
DOCUMENTATION["Commandline Example"]="runmodule getpriv -O privname:SeDebugPrivilege"
VERSION="1.0"
GTK2_DIALOG="dialog.glade2"

affectsList=["Commands"]

runAnExploit_gtk2=canvasengine.runAnExploit_gtk2
runExploit=canvasengine.runExploit


class theexploit(canvasexploit):
    def __init__(self):
        canvasexploit.__init__(self)
        self.result=""
        self.name=NAME
        self.privname="SeDebugPrivilege"
        return
    
    def run(self):
        self.setInfo("%s (running)"%(NAME))
        privname=self.argsDict.get("privname",self.privname)
        ret=0
        for node in self.argsDict["passednodes"]:
            pid=node.shell.getpid()
            if "win32api" in node.capabilities:
                self.log("Opening Process Token for pid %d"%pid)
                phandle=node.shell.openprocess(pid)
                if phandle==0:
                    self.log("OpenProcess failed")
                    continue
                
                token=node.shell.openprocesstoken(phandle,0x20|0x8) #default is TOKEN_ADJUST_PRIVILEGES (0x20) | TOKEN_QUERY (0x8)
                #SE_PRIVILEGE_ENABLED =0x2
                if token==-1:
                    node.shell.CloseHandle(phandle)
                    self.log("OpenProcessToken failed")
                    continue
                
                newprivname=privname+"\x00" #add terminating null
                #SeDebugPrivilege is a good example
                luid=node.shell.lookupprivilegevalue(newprivname)
                #get luid
                if luid=="":
                    node.shell.CloseHandle(phandle)
                    self.log("lookup priv value failed")
                    continue
                
                self.log("LUID for priv %s is %s"%(privname,hexprint(luid)))
                ##ZeroMemory (&tp, sizeof (tp));
                #tp.PrivilegeCount = 1;
                #tp.Privileges[0].Luid = luid;
                #tp.Privileges[0].Attributes = SE_PRIVILEGE_ENABLED;
                
                #/* Adjust Token privileges */
                #if (!AdjustTokenPrivileges (hToken, FALSE, &tp, sizeof(TOKEN_PRIVILEGES), 
                #                           #&oldtp, &dwSize))
                #{
                #printf ("AdjustTokenPrivileges() failed with code %d\n", GetLastError());
                #CloseHandle (hToken);
                #return 1;
                #}
                ret=node.shell.AdjustTokenPrivs(token,luid,0x2) #enable it
                node.shell.CloseHandle(phandle)
                if ret==0:
    
                    self.log("Could not adjust priv")
                    continue
                else:
                    self.log("Successfully adjusted priv")
    
            else:
                self.log("%s node type not supported"%node.nodetype)
                
        self.result=ret
            
        self.setInfo("%s - done (success: %s)"%(NAME,self.result))
        return 1

