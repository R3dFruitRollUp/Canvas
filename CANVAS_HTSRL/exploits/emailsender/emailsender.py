#! /usr/bin/env python

#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2002-2006
#http://www.immunityinc.com/CANVAS/ for more information

import sys
#covers both angles
if "." not in sys.path: sys.path.append(".")


import os,getopt
import socket
from exploitutils import *


from tcpexploit import tcpexploit
import canvasengine
import time



NAME="emailsender"
DESCRIPTION="Sends email via SMTP"
DOCUMENTATION={}
DOCUMENTATION["Notes"]="Mostly used by other exploit modules, but if you want to \nsend a quick email, here's your chance!"
VERSION="1.0"
GTK2_DIALOG="dialog.glade2"

affectsList=["Tools"]

NOTES="""

"""

CHANGELOG="""

"""
    
class theexploit(tcpexploit):
    def __init__(self):
        tcpexploit.__init__(self)
        
        self.port=25
        self.host="localhost"
        self.shellcode="\xcc" * 298
        self.ssl=0
        self.version=1
        self.name=NAME        
        
        self.attachments={} #none by default
        self.fromaddr="dave@immunityinc.com"
        self.toaddr=["dave@immunityinc.com"]
        self.subject="Hello!"
        self.bodytext="Hello, my friend!"
        self.message = ""
        return

    def test(self):
        """
        
        """
        self.host=self.target.interface
        self.port=int(self.argsDict.get("port",self.port))
        
        #s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s=self.gettcpsock()
        try:
            s.connect((self.host, self.port))
        except:
            self.log("No connection could be established")
            return 0
        return 1

    def getargs(self):
        self.host=self.target.interface
        self.port=int(self.argsDict.get("port",self.port))
        self.fromaddr=self.argsDict.get("fromaddr",self.fromaddr)
        self.toaddr=self.argsDict.get("toaddr",self.toaddr)
        self.message = self.argsDict.get("message", self.message)
        return
    
    def sendmail(self):
        
        self.getargs()
        self.log("Sending email through %s:%d"%(self.host,self.port))
        s=self.gettcpsock()
        s.connect((self.host, self.port))
        ret=s.recv(2000)
        self.log("Banner: %s"%ret)
        s.sendall("HELO localhost\r\n")
        ret=s.recv(2000)
        self.log("HELO Response: %s"%ret)
        s.sendall("MAIL FROM: <%s>\r\n"%self.fromaddr)
        ret=s.recv(2000)
        self.log("MAIL FROM Response: %s"%ret)

        if type(self.toaddr)==type(""):
            #if we are a string
            tostring=self.toaddr
        else:
            #type is list
            tostring="<"+",".join(self.toaddr)+">"
        self.log("Tostring: %s"%tostring)
        s.sendall("RCPT TO: %s\r\n"%(tostring))
        ret=s.recv(2000)
        self.log("RCPT TO Response: %s"%ret)
        if ret.lower().count("rejected"):
            self.log("Rejected send...not continuing")
            return 0
        s.sendall("DATA\r\n")
        ret=s.recv(2000)
        self.log("DATA Response: %s"%ret)
        s.sendall( self.message.replace("\n", "\r\n") )
       
        s.sendall("\r\n.\r\n")
        ret=s.recv(100)
        self.log("Data response: %s"%ret)
        s.sendall("QUIT\r\n")
        ret=s.recv(100)
        self.log("Quit response=%s"%ret)
        time.sleep(5)
        s.close()
        return 1


 
    def run(self):
        # change this to use the self.sendmail function

        self.host=self.target.interface
        self.attachments=self.argsDict.get("attachments",self.attachments)
        self.port=int(self.argsDict.get("port",self.port))
        self.fromaddr=self.argsDict.get("fromaddr",self.fromaddr)
        #TO address is a list - this is going to make it impossible to set from commandline
        self.toaddr=self.argsDict.get("toaddr",self.toaddr)
        self.subject=self.argsDict.get("subject",self.subject)
        self.bodytext=self.argsDict.get("bodytext",self.bodytext)

        self.setInfo("%s attacking %s:%d (in progress)"%(NAME,self.host,self.port))

        self.log("Sending email through %s:%d"%(self.host,self.port))
        s=self.gettcpsock()
        s.connect((self.host, self.port))
        ret=s.recv(2000)
        self.log("Banner: %s"%ret)
        s.sendall("HELO localhost\r\n")
        ret=s.recv(2000)
        self.log("HELO Response: %s"%ret)
        s.sendall("MAIL FROM: <%s>\r\n"%self.fromaddr)
        ret=s.recv(2000)
        self.log("MAIL FROM Response: %s"%ret)  
    

        if type(self.toaddr)==type(""):
            #if we are a string
            tostring=self.toaddr
        else:
            #type is list
            tostring="<"+",".join(self.toaddr)+">"
        self.log("Tostring: %s"%tostring)
        s.sendall("RCPT TO: %s\r\n"%(tostring))
        ret=s.recv(2000)
        self.log("RCPT TO Response: %s"%ret)  
        if ret.lower().count("rejected"):
            self.log("Rejected send...not continuing")
            return 0
        s.sendall("DATA\r\n")
        ret=s.recv(2000)
        self.log("DATA Response: %s"%ret)  
        boundary="--7ABCDEFQ"
        maildata="From: %s\r\n"%self.fromaddr
        maildata+="To: %s\r\n"%tostring
        maildata+="Date: %s\r\n"%time.asctime()
        maildata+="MIME-Version: 1.0\r\n"
        #maildata+="Content-Type: multipart/mixed; boundary=\"%s\"\r\n"%boundary[2:]
        maildata+="Content-Type: multipart/related; boundary=\"%s\"\r\n"%boundary[2:]
        maildata+="Subject: %s\r\n"%self.subject
        maildata+="\r\n" #end of header
        
        maildata+=boundary+"\r\n"
        maildata+="Content-Type: text/plain; charset=iso-8859-1\r\n"
        maildata+="Content-Transfer-Encoding: 7bit\r\n\r\n"
        maildata+=self.bodytext
        maildata+="\r\n\r\n"
        for filename in self.attachments.keys():

            maildata+=boundary+"\r\n"

            # default to: application/octet-stream
            attachmentType = "application/octet-stream"
            if "attachmentType" in self.argsDict:
                attachmentType = self.argsDict["attachmentType"]

            maildata+="Content-Type: %s; name=\"%s\"\r\n"%(attachmentType,filename)
            maildata+="Content-Transfer-Encoding: base64\r\n"
            maildata+="Content-ID: <id_%s>\r\n"%filename
            maildata+="\r\n"
            import base64
            base64data=base64.encodestring(self.attachments[filename]).replace("\n","\r\n")
            self.log("Sending file: %s length %d"%(prettyprint(filename),len(base64data)))
            maildata+=base64data
            
        maildata+=boundary+"\r\n"
        s.sendall(maildata)
        s.sendall("\r\n.\r\n")
        ret=s.recv(100)
        self.log("Data response: %s"%ret)
        s.sendall("QUIT\r\n")
        ret=s.recv(100)
        self.log("Quit response=%s"%ret)
        time.sleep(5)
        s.close()
        return 1

if __name__ == '__main__':
    print "Running CANVAS %s Exploit v %s"%(DESCRIPTION,VERSION)
    app = theexploit()
    data=file("upxtestvuln.exe","rb").read()
    app.argsDict["attachments"]={"file1.exe":data}
    ret=standard_callback_commandline(app)
    
