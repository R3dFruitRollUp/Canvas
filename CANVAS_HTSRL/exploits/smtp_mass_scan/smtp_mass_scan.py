#! /usr/bin/env python
"""
smtp_mass_scan.py


"""

#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2003
#http://www.immunityinc.com/CANVAS/ for more information


#Part of CANVAS For licensing information, please refer to your
#Immunity CANVAS licensing documentation


NAME="smtp_mass_scan"
VERSION="1.0"
NOTES2="""
SMTP Fingerprint
  Enter a query
  Go through and get all the unique domain names from that query
  For each domain name get the MX
  Unique the MX's
  For each MX fingerprint
  Report on the results


"""

CHANGELOG="""
1.0 
Created.
"""

DEBUGNOTES="""

"""

import os,getopt
import sys
paths = (".",)
for i in paths:
        if i not in sys.path:
                sys.path.append(i)

import timeoutsocket



import socket
from exploitutils import *




from tcpexploit import tcpexploit
from msrpc import *
import canvasengine
import time


import libs.canvasos as canvasos
from engine.config import canvas_reports_directory

import libs.searchAPI as searchAPI

DOCUMENTATION={}
DOCUMENTATION["Notes"]="""
This module uses a web search query and then generates a list of SMTP servers from it.
These are scanned using smtp_fingerprinter and a report is written. This module uses multiple threads to do the scanning 
so on XP/Vista we recommend 5 maxthreads.
"""

NAME="smtp_mass_scan"
DESCRIPTION="Use a web search query to generate a list of SMTP servers for fingerprinting"

VERSION="0.1"

#affectsList=["Recon"]
PROPERTY = {}
PROPERTY['TYPE'] = "Tools"

NOTES=""" 

"""

import libs.reporting as reporting
from hostKnowledge import *
from engine.config import canvas_resources_directory
import os

class theexploit(tcpexploit):
        def __init__(self):
                tcpexploit.__init__(self)
                self.netmask="32"
                self.report=None
                self.autohack_state=False 
                self.query="Immunity CANVAS"
                self.name=NAME
                return

        def run_on_host(self,target):
                """ 
                runs once on each host that is alive in the netrange 
                """
                if self.state==self.HALT:
                        self.log("Not running on target %s, halted"%target.interface)
                        return 0

                host=target.interface
                self.report.newhost(target)
                self.log("Running on %s"%host)

                try:
                        app=self.engine.getModuleExploit("smtp_fingerprint")
                        app.link(self)
                        app.target=target
                        ret=app.run()
                        if ret:
                                app.setProgress(100)
                        else:
                                app.setProgress(-1)
                        result=app.result
                        self.report.note(target,"SMTP Server: %s"%result)
                except:
                        import traceback
                        traceback.print_exc(file=sys.__stdout__)

                return

        def getargs(self):
                #we don't use the target host at all - we generate a new list of target
                #hosts based on the query string Yahoo results.
                
                #self.host=self.target.interface
                #self.netmask=dInt(str(self.argsDict.get("netmask",self.netmask)).replace("/",""))
                self.maxthreads=int(self.argsDict.get("maxthreads",self.maxthreads))
                self.getarg("query")
                return

        def run(self):
                self.getargs()
                self.log("SMTP Mass Scan Query: %s"%self.query)
                self.log("Maxthreads: %d"%self.maxthreads)
                self.report=reporting.report()
                self.node=self.argsDict["passednodes"][0]
                dothreads = "threads" in self.node.capabilities
                if not dothreads:
                        self.log("Warning: not using threads because select node does not support threading")
                self.setInfo("[SMTP Mass Scan] Scanning query: %s"%(self.query))
                self.setProgress(5)
                self.log("Getting domains from web search query: %s"%self.query)
                domain_list=searchAPI.getWebDomains(self.query)
                self.log("Found %d domains"%len(domain_list))
                smtp_server_list=[]
                for domain in domain_list:
                        #get_mx is in exploitutils
                        self.log("Found: %s" % domain)
                        server=get_mx(domain)
                        if server:
                                smtp_server_list+=[server]
                self.log("Found %d smtp servers."%len(smtp_server_list))
                self.smtp_server_list=uniquelist(smtp_server_list)
                self.run_on_list_of_hosts(self.smtp_server_list, threads=dothreads)

                data=self.report.generate_vulnassess_html()

                filename="smtp_mass_scan_report_%s.html"%(prettyprint(self.query))

                filename = filename.replace("/", "")
                filename=os.path.join(canvas_reports_directory,filename)
                file(filename,"wb").write(data)
                self.log("Wrote HTML formatted report to: %s"%filename)
                self.setInfo("[SMTP Mass Scan] Scanned result: %s"%(filename))

                return 1

        def setVersions(self):
                self.versions={}

                self.versions[1]=("All", None)


        def displayVersions(self):
                for v in self.versions.keys():
                        print "Version %d: %s"%(v,self.versions[v][0])


def usage():
        app = theexploit()
        print "Usage: "+sys.argv[0]+" [-T] [-v version]  -t target [ -p targetport:%d]"%(app.port)
        app.displayVersions()
        sys.exit()

#this stuff happens.
if __name__ == '__main__':
        print "Running CANVAS %s Exploit v %s"%(DESCRIPTION,VERSION)
        app = theexploit()
        ret=standard_callback_commandline(app)

